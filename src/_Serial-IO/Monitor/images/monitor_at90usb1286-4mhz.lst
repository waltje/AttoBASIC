
monitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e42  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800100  00800100  00000eb6  2**0
                  ALLOC
  2 .stab         00000180  00000000  00000000  00000eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000005f  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000028  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000004ba  00000000  00000000  000010bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f7  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000301  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba5  00000000  00000000  00002b71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00003718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a27  00000000  00000000  00003f02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00004929  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00004961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <gTextMsg_CPU_Name>:
   0:	41 54 39 30 55 53 42 31 32 38 36 00                 AT90USB1286.

0000000c <gTextMsg_Explorer>:
   c:	41 72 64 75 69 6e 6f 20 65 78 70 6c 6f 72 65 72     Arduino explorer
  1c:	20 73 74 6b 35 30 30 56 32 20 62 79 20 4d 4c 53      stk500V2 by MLS
	...

0000002d <gTextMsg_Prompt>:
  2d:	42 6f 6f 74 6c 6f 61 64 65 72 3e 00                 Bootloader>.

00000039 <gTextMsg_HUH>:
  39:	48 75 68 3f 00                                      Huh?.

0000003e <gTextMsg_COMPILED_ON>:
  3e:	43 6f 6d 70 69 6c 65 64 20 6f 6e 20 3d 20 00        Compiled on = .

0000004d <gTextMsg_CPU_Type>:
  4d:	43 50 55 20 54 79 70 65 09 3d 20 00                 CPU Type.= .

00000059 <gTextMsg_AVR_ARCH>:
  59:	5f 5f 41 56 52 5f 41 52 43 48 5f 5f 3d 20 00        __AVR_ARCH__= .

00000068 <gTextMsg_AVR_LIBC>:
  68:	41 56 52 20 4c 69 62 43 20 56 65 72 3d 20 00        AVR LibC Ver= .

00000077 <gTextMsg_GCC_VERSION>:
  77:	47 43 43 20 56 65 72 73 69 6f 6e 20 3d 20 00        GCC Version = .

00000086 <gTextMsg_CPU_SIGNATURE>:
  86:	43 50 55 20 49 44 09 3d 20 00                       CPU ID.= .

00000090 <gTextMsg_FUSE_BYTE_LOW>:
  90:	4c 6f 77 20 66 75 73 65 09 3d 20 00                 Low fuse.= .

0000009c <gTextMsg_FUSE_BYTE_HIGH>:
  9c:	48 69 67 68 20 66 75 73 65 09 3d 20 00              High fuse.= .

000000a9 <gTextMsg_FUSE_BYTE_EXT>:
  a9:	45 78 74 20 66 75 73 65 09 3d 20 00                 Ext fuse.= .

000000b5 <gTextMsg_FUSE_BYTE_LOCK>:
  b5:	4c 6f 63 6b 20 66 75 73 65 09 3d 20 00              Lock fuse.= .

000000c2 <gTextMsg_GCC_DATE_STR>:
  c2:	4a 75 6c 20 31 39 20 32 30 31 36 00                 Jul 19 2016.

000000ce <gTextMsg_AVR_LIBC_VER_STR>:
  ce:	31 2e 37 2e 31 00                                   1.7.1.

000000d4 <gTextMsg_GCC_VERSION_STR>:
  d4:	34 2e 35 2e 33 00                                   4.5.3.

000000da <gTextMsg_VECTOR_HEADER>:
  da:	56 23 09 41 44 44 52 09 6f 70 20 63 6f 64 65 09     V#.ADDR.op code.
  ea:	69 6e 73 74 72 75 63 74 69 6f 6e 20 61 64 64 72     instruction addr
  fa:	20 20 20 49 6e 74 65 72 72 75 70 74 00                 Interrupt.

00000107 <gTextMsg_noVector>:
 107:	6e 6f 20 76 65 63 74 6f 72 00                       no vector.

00000111 <gTextMsg_rjmp>:
 111:	72 6a 6d 70 20 20 00                                rjmp  .

00000118 <gTextMsg_jmp>:
 118:	6a 6d 70 20 00                                      jmp .

0000011d <gTextMsg_WHAT_PORT>:
 11d:	57 68 61 74 20 70 6f 72 74 3a 00                    What port:.

00000128 <gTextMsg_PortNotSupported>:
 128:	50 6f 72 74 20 6e 6f 74 20 73 75 70 70 6f 72 74     Port not support
 138:	65 64 00                                            ed.

0000013b <gTextMsg_MustBeLetter>:
 13b:	4d 75 73 74 20 62 65 20 61 20 6c 65 74 74 65 72     Must be a letter
	...

0000014c <gTextMsg_SPACE>:
 14c:	20 00                                                .

0000014e <gTextMsg_WriteToEEprom>:
 14e:	57 72 69 74 74 69 6e 67 20 45 45 00                 Writting EE.

0000015a <gTextMsg_ReadingEEprom>:
 15a:	52 65 61 64 69 6e 67 20 45 45 00                    Reading EE.

00000165 <gTextMsg_EEPROMerrorCnt>:
 165:	45 45 20 65 72 72 20 63 6e 74 3d 00                 EE err cnt=.

00000171 <gTextMsg_PORT>:
 171:	50 4f 52 54 00                                      PORT.

00000176 <gTextMsg_HELP_MSG_0>:
 176:	30 20 3d 20 5a 65 72 6f 20 61 64 64 72 00           0 = Zero addr.

00000184 <gTextMsg_HELP_MSG_QM>:
 184:	3f 20 3d 20 43 50 55 20 73 74 61 74 73 00           ? = CPU stats.

00000192 <gTextMsg_HELP_MSG_AT>:
 192:	40 20 3d 20 45 45 50 52 4f 4d 20 74 65 73 74 00     @ = EEPROM test.

000001a2 <gTextMsg_HELP_MSG_E>:
 1a2:	45 20 3d 20 44 75 6d 70 20 45 45 50 52 4f 4d 00     E = Dump EEPROM.

000001b2 <gTextMsg_HELP_MSG_F>:
 1b2:	46 20 3d 20 44 75 6d 70 20 46 4c 41 53 48 00        F = Dump FLASH.

000001c1 <gTextMsg_HELP_MSG_H>:
 1c1:	48 20 3d 20 48 65 6c 70 00                          H = Help.

000001ca <gTextMsg_HELP_MSG_L>:
 1ca:	4c 20 3d 20 4c 69 73 74 20 49 2f 4f 20 50 6f 72     L = List I/O Por
 1da:	74 73 00                                            ts.

000001dd <gTextMsg_HELP_MSG_Q>:
 1dd:	51 20 3d 20 51 75 69 74 00                          Q = Quit.

000001e6 <gTextMsg_HELP_MSG_R>:
 1e6:	52 20 3d 20 44 75 6d 70 20 52 41 4d 00              R = Dump RAM.

000001f3 <gTextMsg_HELP_MSG_V>:
 1f3:	56 20 3d 20 73 68 6f 77 20 69 6e 74 65 72 72 75     V = show interru
 203:	70 74 20 56 65 63 74 6f 72 73 00                    pt Vectors.

0000020e <gTextMsg_HELP_MSG_Y>:
 20e:	59 20 3d 20 50 6f 72 74 20 62 6c 69 6e 6b 00        Y = Port blink.

0000021d <gTextMsg_END>:
 21d:	2a 00 00                                            *..

00000220 <__ctors_end>:
 220:	11 e0       	ldi	r17, 0x01	; 1
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	01 c0       	rjmp	.+2      	; 0x22a <.do_clear_bss_start>

00000228 <.do_clear_bss_loop>:
 228:	1d 92       	st	X+, r1

0000022a <.do_clear_bss_start>:
 22a:	ae 30       	cpi	r26, 0x0E	; 14
 22c:	b1 07       	cpc	r27, r17
 22e:	e1 f7       	brne	.-8      	; 0x228 <.do_clear_bss_loop>

00000230 <__jumpMain>:

	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

	//*	set stack pointer to top of RAM

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
 230:	00 e2       	ldi	r16, 0x20	; 32
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
 232:	0e bf       	out	0x3e, r16	; 62

	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
 234:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
 236:	0d bf       	out	0x3d, r16	; 61

	asm volatile ( "clr __zero_reg__" );					// GCC depends on register r1 set to 0
 238:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );	// set SREG to 0
 23a:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "jmp main");						// jump to main()
 23c:	0c 94 8c 02 	jmp	0x518	; 0x518 <main>

00000240 <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG	=	c;					// prepare transmission
 240:	80 93 ce 00 	sts	0x00CE, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE))) ;	// wait until byte sent
 244:	80 91 c8 00 	lds	r24, 0x00C8
 248:	86 ff       	sbrs	r24, 6
 24a:	fc cf       	rjmp	.-8      	; 0x244 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);		// delete TXCflag
 24c:	80 91 c8 00 	lds	r24, 0x00C8
 250:	80 64       	ori	r24, 0x40	; 64
 252:	80 93 c8 00 	sts	0x00C8, r24
}
 256:	08 95       	ret

00000258 <recchar>:
/*
 * Read single byte from USART, block if no data available
 */
static unsigned char recchar(void)
{
	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE))) {
 258:	80 91 c8 00 	lds	r24, 0x00C8
 25c:	87 ff       	sbrs	r24, 7
 25e:	fc cf       	rjmp	.-8      	; 0x258 <recchar>
		// wait for data
	}
	return UART_DATA_REG;
 260:	80 91 ce 00 	lds	r24, 0x00CE
}
 264:	08 95       	ret

00000266 <delay_ms.clone.1>:
	asm volatile ( "jmp main");						// jump to main()
}


//*****************************************************************************
void delay_ms(unsigned int timedelay)
 266:	88 ec       	ldi	r24, 0xC8	; 200
 268:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	e3 ef       	ldi	r30, 0xF3	; 243
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <delay_ms.clone.1+0x8>
 272:	00 c0       	rjmp	.+0      	; 0x274 <delay_ms.clone.1+0xe>
 274:	00 00       	nop
 276:	01 97       	sbiw	r24, 0x01	; 1
{
	unsigned int i;

	for (i = 0;	i < timedelay;	i++) {
 278:	c1 f7       	brne	.-16     	; 0x26a <delay_ms.clone.1+0x4>
		_delay_ms(0.5);
	}
}
 27a:	08 95       	ret

0000027c <delay_ms>:
//*****************************************************************************
void delay_ms(unsigned int timedelay)
{
	unsigned int i;

	for (i = 0;	i < timedelay;	i++) {
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	08 c0       	rjmp	.+16     	; 0x292 <delay_ms+0x16>
 282:	e3 ef       	ldi	r30, 0xF3	; 243
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <delay_ms+0xa>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <delay_ms+0x10>
 28c:	00 00       	nop
 28e:	2f 5f       	subi	r18, 0xFF	; 255
 290:	3f 4f       	sbci	r19, 0xFF	; 255
 292:	28 17       	cp	r18, r24
 294:	39 07       	cpc	r19, r25
 296:	a8 f3       	brcs	.-22     	; 0x282 <delay_ms+0x6>
		_delay_ms(0.5);
	}
}
 298:	08 95       	ret

0000029a <PrintFromPROGMEM>:
const char gTextMsg_END[]			PROGMEM =	"*";


//************************************************************************
void	PrintFromPROGMEM(const void *dataPtr, unsigned char offset)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	char theChar;

	dataPtr		+=	offset;
 29e:	ec 01       	movw	r28, r24
 2a0:	c6 0f       	add	r28, r22
 2a2:	d1 1d       	adc	r29, r1

	do {
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#if (FLASHEND > 0x10000)
		theChar =	pgm_read_byte_far((uint16_t)dataPtr++);
 2a4:	ce 01       	movw	r24, r28
 2a6:	a0 e0       	ldi	r26, 0x00	; 0
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	21 96       	adiw	r28, 0x01	; 1
 2ac:	ab bf       	out	0x3b, r26	; 59
 2ae:	fc 01       	movw	r30, r24
 2b0:	87 91       	elpm	r24, Z+
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#else
		theChar =	pgm_read_byte_near((uint16_t)dataPtr++);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		if (theChar != 0) {
 2b2:	88 23       	and	r24, r24
 2b4:	19 f0       	breq	.+6      	; 0x2bc <PrintFromPROGMEM+0x22>
			sendchar(theChar);
 2b6:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
 2ba:	f4 cf       	rjmp	.-24     	; 0x2a4 <PrintFromPROGMEM+0xa>
		}
	} while (theChar != 0);
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <PrintNewLine>:

//************************************************************************
void	PrintNewLine(void)
{
	sendchar(0x0d);
 2c2:	8d e0       	ldi	r24, 0x0D	; 13
 2c4:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
	sendchar(0x0a);
 2c8:	8a e0       	ldi	r24, 0x0A	; 10
 2ca:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
}
 2ce:	08 95       	ret

000002d0 <PrintAvailablePort>:
	}
}

//************************************************************************
static void	PrintAvailablePort(char thePortLetter)
{
 2d0:	1f 93       	push	r17
 2d2:	18 2f       	mov	r17, r24
	PrintFromPROGMEM(gTextMsg_PORT, 0);
 2d4:	81 e7       	ldi	r24, 0x71	; 113
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	sendchar(thePortLetter);
 2de:	81 2f       	mov	r24, r17
 2e0:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
	PrintNewLine();
 2e4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
}
 2e8:	1f 91       	pop	r17
 2ea:	08 95       	ret

000002ec <PrintFromPROGMEMln>:


//************************************************************************
void	PrintFromPROGMEMln(const void *dataPtr, unsigned char offset)
{
	PrintFromPROGMEM(dataPtr, offset);
 2ec:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>

	PrintNewLine();
 2f0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
}
 2f4:	08 95       	ret

000002f6 <PrintString>:


//************************************************************************
void	PrintString(char *textString)
{
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	e8 2e       	mov	r14, r24
 300:	e7 01       	movw	r28, r14
 302:	7e 01       	movw	r14, r28
 304:	f9 2e       	mov	r15, r25
 306:	e7 01       	movw	r28, r14
	int ii;

	theChar		=	1;
	ii			=	0;
	while (theChar != 0) {
		theChar =	textString[ii];
 308:	89 91       	ld	r24, Y+
		if (theChar != 0) {
 30a:	88 23       	and	r24, r24
 30c:	19 f0       	breq	.+6      	; 0x314 <PrintString+0x1e>
			sendchar(theChar);
 30e:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
 312:	fa cf       	rjmp	.-12     	; 0x308 <PrintString+0x12>
		}
		ii++;
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	ff 90       	pop	r15
 31a:	ef 90       	pop	r14
 31c:	08 95       	ret

0000031e <PrintHexByte>:

//************************************************************************
void	PrintHexByte(unsigned char theByte)
{
 31e:	1f 93       	push	r17
 320:	18 2f       	mov	r17, r24
	char theChar;

	theChar =	0x30 + ((theByte >> 4) & 0x0f);
 322:	98 2f       	mov	r25, r24
 324:	92 95       	swap	r25
 326:	9f 70       	andi	r25, 0x0F	; 15
 328:	89 2f       	mov	r24, r25
 32a:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39) {
 32c:	8a 33       	cpi	r24, 0x3A	; 58
 32e:	08 f0       	brcs	.+2      	; 0x332 <PrintHexByte+0x14>
		theChar +=	7;
 330:	89 5f       	subi	r24, 0xF9	; 249
	}
	sendchar(theChar );
 332:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>

	theChar =	0x30 + (theByte & 0x0f);
 336:	1f 70       	andi	r17, 0x0F	; 15
 338:	81 2f       	mov	r24, r17
 33a:	80 5d       	subi	r24, 0xD0	; 208
	if (theChar > 0x39) {
 33c:	8a 33       	cpi	r24, 0x3A	; 58
 33e:	08 f0       	brcs	.+2      	; 0x342 <PrintHexByte+0x24>
		theChar +=	7;
 340:	89 5f       	subi	r24, 0xF9	; 249
	}
	sendchar(theChar );
 342:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
}
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <DumpHex.clone.0>:
	kDUMP_EEPROM,
	kDUMP_RAM
};

//************************************************************************
static void	DumpHex(unsigned char dumpWhat, unsigned long startAddress, unsigned char numRows)
 34a:	3f 92       	push	r3
 34c:	4f 92       	push	r4
 34e:	5f 92       	push	r5
 350:	6f 92       	push	r6
 352:	7f 92       	push	r7
 354:	8f 92       	push	r8
 356:	9f 92       	push	r9
 358:	af 92       	push	r10
 35a:	bf 92       	push	r11
 35c:	cf 92       	push	r12
 35e:	df 92       	push	r13
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
 366:	1f 93       	push	r17
 368:	df 93       	push	r29
 36a:	cf 93       	push	r28
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	66 97       	sbiw	r28, 0x16	; 22
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	68 2e       	mov	r6, r24
 37e:	7a 01       	movw	r14, r20
 380:	8b 01       	movw	r16, r22
 382:	db 01       	movw	r26, r22
 384:	ca 01       	movw	r24, r20
 386:	80 50       	subi	r24, 0x00	; 0
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	af 4f       	sbci	r26, 0xFF	; 255
 38c:	bf 4f       	sbci	r27, 0xFF	; 255
 38e:	8b 8b       	std	Y+19, r24	; 0x13
 390:	9c 8b       	std	Y+20, r25	; 0x14
 392:	ad 8b       	std	Y+21, r26	; 0x15
 394:	be 8b       	std	Y+22, r27	; 0x16
	char asciiDump[18];
	unsigned char	*ramPtr;


	ramPtr				=	0;
	theValue			=	0;
 396:	77 24       	eor	r7, r7
 398:	2e 01       	movw	r4, r28
 39a:	08 94       	sec
 39c:	41 1c       	adc	r4, r1
 39e:	51 1c       	adc	r5, r1
			sendchar(0x20);
			if ((theValue >= 0x20) && (theValue < 0x7f)) {
				asciiDump[ii % 16]	=	theValue;
			}
			else{
				asciiDump[ii % 16]	=	'.';
 3a0:	8e e2       	ldi	r24, 0x2E	; 46
 3a2:	38 2e       	mov	r3, r24

	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0) {
		if (myAddressPointer > 0x10000) {
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	e9 16       	cp	r14, r25
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	f9 06       	cpc	r15, r25
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	09 07       	cpc	r16, r25
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	19 07       	cpc	r17, r25
 3b4:	18 f0       	brcs	.+6      	; 0x3bc <DumpHex.clone.0+0x72>
			PrintHexByte((myAddressPointer >> 16) & 0x00ff);
 3b6:	80 2f       	mov	r24, r16
 3b8:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		}
		PrintHexByte((myAddressPointer >> 8) & 0x00ff);
 3bc:	8f 2d       	mov	r24, r15
 3be:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		PrintHexByte(myAddressPointer & 0x00ff);
 3c2:	8e 2d       	mov	r24, r14
 3c4:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 3c8:	80 e2       	ldi	r24, 0x20	; 32
 3ca:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar('-');
 3ce:	8d e2       	ldi	r24, 0x2D	; 45
 3d0:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar(0x20);
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>

		asciiDump[0]		=	0;
 3da:	19 82       	std	Y+1, r1	; 0x01
 3dc:	57 01       	movw	r10, r14
 3de:	68 01       	movw	r12, r16
 3e0:	88 24       	eor	r8, r8
 3e2:	99 24       	eor	r9, r9
		for (ii = 0;	ii < 16;	ii++) {
			switch (dumpWhat) {
 3e4:	a6 2d       	mov	r26, r6
 3e6:	a1 30       	cpi	r26, 0x01	; 1
 3e8:	49 f0       	breq	.+18     	; 0x3fc <DumpHex.clone.0+0xb2>
 3ea:	a1 30       	cpi	r26, 0x01	; 1
 3ec:	18 f0       	brcs	.+6      	; 0x3f4 <DumpHex.clone.0+0xaa>
 3ee:	a2 30       	cpi	r26, 0x02	; 2
 3f0:	61 f4       	brne	.+24     	; 0x40a <DumpHex.clone.0+0xc0>
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <DumpHex.clone.0+0xbc>
			case kDUMP_FLASH:
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#if (FLASHEND > 0x10000)
				theValue	=	pgm_read_byte_far(myAddressPointer);
 3f4:	cb be       	out	0x3b, r12	; 59
 3f6:	f5 01       	movw	r30, r10
 3f8:	77 90       	elpm	r7, Z+
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <DumpHex.clone.0+0xc0>
				theValue	=	pgm_read_byte_near(myAddressPointer);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
				break;

			case kDUMP_EEPROM:
				theValue	=	eeprom_read_byte((uint8_t*)(uint16_t)myAddressPointer);
 3fc:	c5 01       	movw	r24, r10
 3fe:	0e 94 0b 07 	call	0xe16	; 0xe16 <__eerd_byte_usb1286>
 402:	78 2e       	mov	r7, r24
 404:	02 c0       	rjmp	.+4      	; 0x40a <DumpHex.clone.0+0xc0>
				break;

			case kDUMP_RAM:
				theValue	=	ramPtr[myAddressPointer];
 406:	f5 01       	movw	r30, r10
 408:	70 80       	ld	r7, Z
				break;

			}
			PrintHexByte(theValue);
 40a:	87 2d       	mov	r24, r7
 40c:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			sendchar(0x20);
 410:	80 e2       	ldi	r24, 0x20	; 32
 412:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
			if ((theValue >= 0x20) && (theValue < 0x7f)) {
 416:	87 2d       	mov	r24, r7
 418:	80 52       	subi	r24, 0x20	; 32
 41a:	94 01       	movw	r18, r8
 41c:	2f 70       	andi	r18, 0x0F	; 15
 41e:	30 70       	andi	r19, 0x00	; 0
 420:	8f 35       	cpi	r24, 0x5F	; 95
 422:	28 f4       	brcc	.+10     	; 0x42e <DumpHex.clone.0+0xe4>
				asciiDump[ii % 16]	=	theValue;
 424:	24 0d       	add	r18, r4
 426:	35 1d       	adc	r19, r5
 428:	d9 01       	movw	r26, r18
 42a:	7c 92       	st	X, r7
 42c:	04 c0       	rjmp	.+8      	; 0x436 <DumpHex.clone.0+0xec>
			}
			else{
				asciiDump[ii % 16]	=	'.';
 42e:	24 0d       	add	r18, r4
 430:	35 1d       	adc	r19, r5
 432:	f9 01       	movw	r30, r18
 434:	30 82       	st	Z, r3
			}

			myAddressPointer++;
 436:	08 94       	sec
 438:	a1 1c       	adc	r10, r1
 43a:	b1 1c       	adc	r11, r1
 43c:	c1 1c       	adc	r12, r1
 43e:	d1 1c       	adc	r13, r1
 440:	08 94       	sec
 442:	81 1c       	adc	r8, r1
 444:	91 1c       	adc	r9, r1
		sendchar(0x20);
		sendchar('-');
		sendchar(0x20);

		asciiDump[0]		=	0;
		for (ii = 0;	ii < 16;	ii++) {
 446:	f0 e1       	ldi	r31, 0x10	; 16
 448:	8f 16       	cp	r8, r31
 44a:	91 04       	cpc	r9, r1
 44c:	59 f6       	brne	.-106    	; 0x3e4 <DumpHex.clone.0+0x9a>
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	a0 e0       	ldi	r26, 0x00	; 0
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e8 0e       	add	r14, r24
 458:	f9 1e       	adc	r15, r25
 45a:	0a 1f       	adc	r16, r26
 45c:	1b 1f       	adc	r17, r27
				asciiDump[ii % 16]	=	'.';
			}

			myAddressPointer++;
		}
		asciiDump[16]	=	0;
 45e:	19 8a       	std	Y+17, r1	; 0x11
		PrintString(asciiDump);
 460:	c2 01       	movw	r24, r4
 462:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <PrintString>
		PrintNewLine();
 466:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>


	ramPtr				=	0;
	theValue			=	0;
	myAddressPointer	=	startAddress;
	while (numRows > 0) {
 46a:	8b 89       	ldd	r24, Y+19	; 0x13
 46c:	9c 89       	ldd	r25, Y+20	; 0x14
 46e:	ad 89       	ldd	r26, Y+21	; 0x15
 470:	be 89       	ldd	r27, Y+22	; 0x16
 472:	e8 16       	cp	r14, r24
 474:	f9 06       	cpc	r15, r25
 476:	0a 07       	cpc	r16, r26
 478:	1b 07       	cpc	r17, r27
 47a:	09 f0       	breq	.+2      	; 0x47e <DumpHex.clone.0+0x134>
 47c:	93 cf       	rjmp	.-218    	; 0x3a4 <DumpHex.clone.0+0x5a>
		PrintString(asciiDump);
		PrintNewLine();

		numRows--;
	}
}
 47e:	66 96       	adiw	r28, 0x16	; 22
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	bf 90       	pop	r11
 49c:	af 90       	pop	r10
 49e:	9f 90       	pop	r9
 4a0:	8f 90       	pop	r8
 4a2:	7f 90       	pop	r7
 4a4:	6f 90       	pop	r6
 4a6:	5f 90       	pop	r5
 4a8:	4f 90       	pop	r4
 4aa:	3f 90       	pop	r3
 4ac:	08 95       	ret

000004ae <PrintDecInt>:
	sendchar(theChar );
}

//************************************************************************
void	PrintDecInt(int theNumber, int digitCnt)
{
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	ec 01       	movw	r28, r24
 4b8:	8b 01       	movw	r16, r22
	int theChar;
	int myNumber;

	myNumber	=	theNumber;

	if ((myNumber > 100) || (digitCnt >= 3)) {
 4ba:	85 36       	cpi	r24, 0x65	; 101
 4bc:	91 05       	cpc	r25, r1
 4be:	1c f4       	brge	.+6      	; 0x4c6 <PrintDecInt+0x18>
 4c0:	63 30       	cpi	r22, 0x03	; 3
 4c2:	71 05       	cpc	r23, r1
 4c4:	4c f0       	brlt	.+18     	; 0x4d8 <PrintDecInt+0x2a>
		theChar		=	0x30 + myNumber / 100;
 4c6:	ce 01       	movw	r24, r28
 4c8:	64 e6       	ldi	r22, 0x64	; 100
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divmodhi4>
		sendchar(theChar );
 4d0:	86 2f       	mov	r24, r22
 4d2:	80 5d       	subi	r24, 0xD0	; 208
 4d4:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
	}

	if ((myNumber > 10) || (digitCnt >= 2)) {
 4d8:	cb 30       	cpi	r28, 0x0B	; 11
 4da:	d1 05       	cpc	r29, r1
 4dc:	1c f4       	brge	.+6      	; 0x4e4 <PrintDecInt+0x36>
 4de:	02 30       	cpi	r16, 0x02	; 2
 4e0:	11 05       	cpc	r17, r1
 4e2:	6c f0       	brlt	.+26     	; 0x4fe <PrintDecInt+0x50>
		theChar =	0x30  + ((myNumber % 100) / 10 );
 4e4:	ce 01       	movw	r24, r28
 4e6:	64 e6       	ldi	r22, 0x64	; 100
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divmodhi4>
 4ee:	6a e0       	ldi	r22, 0x0A	; 10
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divmodhi4>
		sendchar(theChar );
 4f6:	86 2f       	mov	r24, r22
 4f8:	80 5d       	subi	r24, 0xD0	; 208
 4fa:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
	}
	theChar =	0x30 + (myNumber % 10);
 4fe:	ce 01       	movw	r24, r28
 500:	6a e0       	ldi	r22, 0x0A	; 10
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divmodhi4>
	sendchar(theChar );
 508:	80 5d       	subi	r24, 0xD0	; 208
 50a:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
}
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <main>:
void (*app_start)(void) = 0x0000;


//*****************************************************************************
int main(void)
{
 518:	2f 92       	push	r2
 51a:	3f 92       	push	r3
 51c:	5f 92       	push	r5
 51e:	6f 92       	push	r6
 520:	7f 92       	push	r7
 522:	8f 92       	push	r8
 524:	9f 92       	push	r9
 526:	af 92       	push	r10
 528:	bf 92       	push	r11
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	2c 97       	sbiw	r28, 0x0c	; 12
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
	//*	some chips dont set the stack properly
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND >> 8) );
 54a:	00 e2       	ldi	r16, 0x20	; 32
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_HI_ADDR) );
 54c:	0e bf       	out	0x3e, r16	; 62
	asm volatile ( "ldi	16, %0" :: "i" (RAMEND & 0x0ff) );
 54e:	0f ef       	ldi	r16, 0xFF	; 255
	asm volatile ( "out %0,16" :: "i" (AVR_STACK_POINTER_LO_ADDR) );
 550:	0d bf       	out	0x3d, r16	; 61
	/*
	* Init UART
	* set baudrate and enable USART receiver and transmiter without interrupts
	*/
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 << UART_DOUBLE_SPEED);
 552:	80 91 c8 00 	lds	r24, 0x00C8
 556:	82 60       	ori	r24, 0x02	; 2
 558:	80 93 c8 00 	sts	0x00C8, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE, F_CPU);
 55c:	8c e0       	ldi	r24, 0x0C	; 12
 55e:	80 93 cc 00 	sts	0x00CC, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
 562:	88 e1       	ldi	r24, 0x18	; 24
 564:	80 93 c9 00 	sts	0x00C9, r24

	asm volatile ("nop");					// wait until port has changed
 568:	00 00       	nop
		}
		PrintNewLine();
	}
*/

	gRamIndex			=	0;
 56a:	10 92 0a 01 	sts	0x010A, r1
 56e:	10 92 0b 01 	sts	0x010B, r1
 572:	10 92 0c 01 	sts	0x010C, r1
 576:	10 92 0d 01 	sts	0x010D, r1
	gFlashIndex			=	0;
 57a:	10 92 06 01 	sts	0x0106, r1
 57e:	10 92 07 01 	sts	0x0107, r1
 582:	10 92 08 01 	sts	0x0108, r1
 586:	10 92 09 01 	sts	0x0109, r1
	gEepromIndex		=	0;
 58a:	10 92 02 01 	sts	0x0102, r1
 58e:	10 92 03 01 	sts	0x0103, r1
 592:	10 92 04 01 	sts	0x0104, r1
 596:	10 92 05 01 	sts	0x0105, r1

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
 59a:	8c e0       	ldi	r24, 0x0C	; 12
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	keepGoing	=	1;
	while (keepGoing) {
		PrintFromPROGMEM(gTextMsg_Prompt, 0);
 5a4:	8d e2       	ldi	r24, 0x2D	; 45
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
		theChar =	recchar();
 5ae:	0e 94 2c 01 	call	0x258	; 0x258 <recchar>
 5b2:	08 2f       	mov	r16, r24
		if (theChar >= 0x60) {
 5b4:	80 36       	cpi	r24, 0x60	; 96
 5b6:	08 f0       	brcs	.+2      	; 0x5ba <main+0xa2>
			theChar =	theChar & 0x5F;
 5b8:	0f 75       	andi	r16, 0x5F	; 95
		}

		if (theChar >= 0x20) {
 5ba:	00 32       	cpi	r16, 0x20	; 32
 5bc:	30 f0       	brcs	.+12     	; 0x5ca <main+0xb2>
			sendchar(theChar);
 5be:	80 2f       	mov	r24, r16
 5c0:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
			sendchar(0x20);
 5c4:	80 e2       	ldi	r24, 0x20	; 32
 5c6:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		}

		switch (theChar) {
 5ca:	08 34       	cpi	r16, 0x48	; 72
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0xb8>
 5ce:	99 c1       	rjmp	.+818    	; 0x902 <main+0x3ea>
 5d0:	09 34       	cpi	r16, 0x49	; 73
 5d2:	90 f4       	brcc	.+36     	; 0x5f8 <main+0xe0>
 5d4:	00 34       	cpi	r16, 0x40	; 64
 5d6:	09 f4       	brne	.+2      	; 0x5da <main+0xc2>
 5d8:	c1 c0       	rjmp	.+386    	; 0x75c <main+0x244>
 5da:	01 34       	cpi	r16, 0x41	; 65
 5dc:	30 f4       	brcc	.+12     	; 0x5ea <main+0xd2>
 5de:	00 33       	cpi	r16, 0x30	; 48
 5e0:	f1 f0       	breq	.+60     	; 0x61e <main+0x106>
 5e2:	0f 33       	cpi	r16, 0x3F	; 63
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <main+0xd0>
 5e6:	ec c3       	rjmp	.+2008   	; 0xdc0 <main+0x8a8>
 5e8:	30 c0       	rjmp	.+96     	; 0x64a <main+0x132>
 5ea:	05 34       	cpi	r16, 0x45	; 69
 5ec:	09 f4       	brne	.+2      	; 0x5f0 <main+0xd8>
 5ee:	36 c1       	rjmp	.+620    	; 0x85c <main+0x344>
 5f0:	06 34       	cpi	r16, 0x46	; 70
 5f2:	09 f0       	breq	.+2      	; 0x5f6 <main+0xde>
 5f4:	e5 c3       	rjmp	.+1994   	; 0xdc0 <main+0x8a8>
 5f6:	60 c1       	rjmp	.+704    	; 0x8b8 <main+0x3a0>
 5f8:	02 35       	cpi	r16, 0x52	; 82
 5fa:	09 f4       	brne	.+2      	; 0x5fe <main+0xe6>
 5fc:	e7 c1       	rjmp	.+974    	; 0x9cc <main+0x4b4>
 5fe:	03 35       	cpi	r16, 0x53	; 83
 600:	38 f4       	brcc	.+14     	; 0x610 <main+0xf8>
 602:	0c 34       	cpi	r16, 0x4C	; 76
 604:	09 f4       	brne	.+2      	; 0x608 <main+0xf0>
 606:	b7 c1       	rjmp	.+878    	; 0x976 <main+0x45e>
 608:	01 35       	cpi	r16, 0x51	; 81
 60a:	09 f0       	breq	.+2      	; 0x60e <main+0xf6>
 60c:	d9 c3       	rjmp	.+1970   	; 0xdc0 <main+0x8a8>
 60e:	cb c1       	rjmp	.+918    	; 0x9a6 <main+0x48e>
 610:	06 35       	cpi	r16, 0x56	; 86
 612:	09 f4       	brne	.+2      	; 0x616 <main+0xfe>
 614:	00 c2       	rjmp	.+1024   	; 0xa16 <main+0x4fe>
 616:	09 35       	cpi	r16, 0x59	; 89
 618:	09 f0       	breq	.+2      	; 0x61c <main+0x104>
 61a:	d2 c3       	rjmp	.+1956   	; 0xdc0 <main+0x8a8>
 61c:	4a c3       	rjmp	.+1684   	; 0xcb2 <main+0x79a>
		case '0':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 2);
 61e:	86 e7       	ldi	r24, 0x76	; 118
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	62 e0       	ldi	r22, 0x02	; 2
 624:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
			gFlashIndex		=	0;
 628:	10 92 06 01 	sts	0x0106, r1
 62c:	10 92 07 01 	sts	0x0107, r1
 630:	10 92 08 01 	sts	0x0108, r1
 634:	10 92 09 01 	sts	0x0109, r1
			gRamIndex		=	0;
 638:	10 92 0a 01 	sts	0x010A, r1
 63c:	10 92 0b 01 	sts	0x010B, r1
 640:	10 92 0c 01 	sts	0x010C, r1
 644:	10 92 0d 01 	sts	0x010D, r1
 648:	00 c1       	rjmp	.+512    	; 0x84a <main+0x332>
			gEepromIndex	=	0;
			break;

		case '?':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
 64a:	84 e8       	ldi	r24, 0x84	; 132
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	62 e0       	ldi	r22, 0x02	; 2
 650:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
//************************************************************************
static void	PrintCPUstats(void)
{
	unsigned char fuseByte;

	PrintFromPROGMEMln(gTextMsg_Explorer, 0);
 654:	8c e0       	ldi	r24, 0x0C	; 12
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	60 e0       	ldi	r22, 0x00	; 0
 65a:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_COMPILED_ON, 0);
 65e:	8e e3       	ldi	r24, 0x3E	; 62
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_DATE_STR, 0);
 668:	82 ec       	ldi	r24, 0xC2	; 194
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	60 e0       	ldi	r22, 0x00	; 0
 66e:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_CPU_Type, 0);
 672:	8d e4       	ldi	r24, 0x4D	; 77
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	PrintFromPROGMEM(gTextMsg_AVR_ARCH, 0);
 686:	89 e5       	ldi	r24, 0x59	; 89
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintDecInt(__AVR_ARCH__, 1);
 690:	83 e3       	ldi	r24, 0x33	; 51
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	61 e0       	ldi	r22, 0x01	; 1
 696:	70 e0       	ldi	r23, 0x00	; 0
 698:	0e 94 57 02 	call	0x4ae	; 0x4ae <PrintDecInt>
	PrintNewLine();
 69c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_GCC_VERSION, 0);
 6a0:	87 e7       	ldi	r24, 0x77	; 119
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_GCC_VERSION_STR, 0);
 6aa:	84 ed       	ldi	r24, 0xD4	; 212
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	60 e0       	ldi	r22, 0x00	; 0
 6b0:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	//*	these can be found in avr/version.h
	PrintFromPROGMEM(gTextMsg_AVR_LIBC, 0);
 6b4:	88 e6       	ldi	r24, 0x68	; 104
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintFromPROGMEMln(gTextMsg_AVR_LIBC_VER_STR, 0);
 6be:	8e ec       	ldi	r24, 0xCE	; 206
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

#if defined(SIGNATURE_0)
	PrintFromPROGMEM(gTextMsg_CPU_SIGNATURE, 0);
 6c8:	86 e8       	ldi	r24, 0x86	; 134
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	//*	these can be found in avr/iomxxx.h
	PrintHexByte(SIGNATURE_0);
 6d2:	8e e1       	ldi	r24, 0x1E	; 30
 6d4:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintHexByte(SIGNATURE_1);
 6d8:	87 e9       	ldi	r24, 0x97	; 151
 6da:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintHexByte(SIGNATURE_2);
 6de:	82 e8       	ldi	r24, 0x82	; 130
 6e0:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintNewLine();
 6e4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
#endif


#if defined(GET_LOW_FUSE_BITS)
	//*	fuse settings
	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOW, 0);
 6e8:	80 e9       	ldi	r24, 0x90	; 144
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
 6f2:	09 e0       	ldi	r16, 0x09	; 9
 6f4:	e0 e0       	ldi	r30, 0x00	; 0
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	00 93 57 00 	sts	0x0057, r16
 6fc:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
 6fe:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintNewLine();
 702:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_HIGH, 0);
 706:	8c e9       	ldi	r24, 0x9C	; 156
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
 710:	e3 e0       	ldi	r30, 0x03	; 3
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	00 93 57 00 	sts	0x0057, r16
 718:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
 71a:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintNewLine();
 71e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_EXT, 0);
 722:	89 ea       	ldi	r24, 0xA9	; 169
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
 72c:	e2 e0       	ldi	r30, 0x02	; 2
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	00 93 57 00 	sts	0x0057, r16
 734:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
 736:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintNewLine();
 73a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	PrintFromPROGMEM(gTextMsg_FUSE_BYTE_LOCK, 0);
 73e:	85 eb       	ldi	r24, 0xB5	; 181
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	fuseByte	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
 748:	e1 e0       	ldi	r30, 0x01	; 1
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	00 93 57 00 	sts	0x0057, r16
 750:	84 91       	lpm	r24, Z
	PrintHexByte(fuseByte);
 752:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
	PrintNewLine();
 756:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
 75a:	24 cf       	rjmp	.-440    	; 0x5a4 <main+0x8c>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 2);
			PrintCPUstats();
			break;

		case '@':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 2);
 75c:	82 e9       	ldi	r24, 0x92	; 146
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	62 e0       	ldi	r22, 0x02	; 2
 762:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	int ii;
	char theChar;
	char theEEPROMchar;
	int errorCount;

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
 766:	8e e4       	ldi	r24, 0x4E	; 78
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintNewLine();
 770:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	ii			=	0;
 774:	ee 24       	eor	r14, r14
 776:	ff 24       	eor	r15, r15
 778:	12 c0       	rjmp	.+36     	; 0x79e <main+0x286>
	while (((theChar = pgm_read_byte_far(((uint16_t)gTextMsg_Explorer) + ii)) != '*') && (ii < 512))
#else
	while (((theChar = pgm_read_byte_near(((uint16_t)gTextMsg_Explorer) + ii)) != '*') && (ii < 512))
#endif
	{
		eeprom_write_byte((uint8_t*)ii, theChar);
 77a:	c7 01       	movw	r24, r14
 77c:	60 2f       	mov	r22, r16
 77e:	0e 94 13 07 	call	0xe26	; 0xe26 <__eewr_byte_usb1286>
		if (theChar == 0) {
 782:	00 23       	and	r16, r16
 784:	31 f4       	brne	.+12     	; 0x792 <main+0x27a>
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
 786:	8c e4       	ldi	r24, 0x4C	; 76
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
 790:	03 c0       	rjmp	.+6      	; 0x798 <main+0x280>
		}
		else{
			sendchar(theChar);
 792:	80 2f       	mov	r24, r16
 794:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		}
		ii++;
 798:	08 94       	sec
 79a:	e1 1c       	adc	r14, r1
 79c:	f1 1c       	adc	r15, r1

	PrintFromPROGMEMln(gTextMsg_WriteToEEprom, 0);
	PrintNewLine();
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far(((uint16_t)gTextMsg_Explorer) + ii)) != '*') && (ii < 512))
 79e:	c7 01       	movw	r24, r14
 7a0:	84 5f       	subi	r24, 0xF4	; 244
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	a0 e0       	ldi	r26, 0x00	; 0
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	ab bf       	out	0x3b, r26	; 59
 7aa:	fc 01       	movw	r30, r24
 7ac:	07 91       	elpm	r16, Z+
 7ae:	0a 32       	cpi	r16, 0x2A	; 42
 7b0:	29 f0       	breq	.+10     	; 0x7bc <main+0x2a4>
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	e2 16       	cp	r14, r18
 7b6:	22 e0       	ldi	r18, 0x02	; 2
 7b8:	f2 06       	cpc	r15, r18
 7ba:	f9 f6       	brne	.-66     	; 0x77a <main+0x262>
		}
		ii++;
	}

	//*	no go back through and test
	PrintNewLine();
 7bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	PrintNewLine();
 7c0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
 7c4:	8a e5       	ldi	r24, 0x5A	; 90
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintNewLine();
 7ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	errorCount	=	0;
 7d2:	00 e0       	ldi	r16, 0x00	; 0
 7d4:	10 e0       	ldi	r17, 0x00	; 0
	ii			=	0;
 7d6:	aa 24       	eor	r10, r10
 7d8:	bb 24       	eor	r11, r11
 7da:	15 c0       	rjmp	.+42     	; 0x806 <main+0x2ee>
	while (((theChar = pgm_read_byte_far((uint16_t)gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#else
	while (((theChar = pgm_read_byte_near((uint16_t)gTextMsg_Explorer + ii)) != '*') && (ii < 512))
#endif
	{
		theEEPROMchar	=	eeprom_read_byte((uint8_t*)ii);
 7dc:	c5 01       	movw	r24, r10
 7de:	0e 94 0b 07 	call	0xe16	; 0xe16 <__eerd_byte_usb1286>
 7e2:	e8 2e       	mov	r14, r24
		if (theEEPROMchar == 0) {
 7e4:	88 23       	and	r24, r24
 7e6:	31 f4       	brne	.+12     	; 0x7f4 <main+0x2dc>
			PrintFromPROGMEM(gTextMsg_SPACE, 0);
 7e8:	8c e4       	ldi	r24, 0x4C	; 76
 7ea:	91 e0       	ldi	r25, 0x01	; 1
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <main+0x2e0>
		}
		else{
			sendchar(theEEPROMchar);
 7f4:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		}
		if (theEEPROMchar != theChar) {
 7f8:	ed 14       	cp	r14, r13
 7fa:	11 f0       	breq	.+4      	; 0x800 <main+0x2e8>
			errorCount++;
 7fc:	0f 5f       	subi	r16, 0xFF	; 255
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		ii++;
 800:	08 94       	sec
 802:	a1 1c       	adc	r10, r1
 804:	b1 1c       	adc	r11, r1
	PrintFromPROGMEMln(gTextMsg_ReadingEEprom, 0);
	PrintNewLine();
	errorCount	=	0;
	ii			=	0;
#if (FLASHEND > 0x10000)
	while (((theChar = pgm_read_byte_far((uint16_t)gTextMsg_Explorer + ii)) != '*') && (ii < 512))
 806:	c5 01       	movw	r24, r10
 808:	84 5f       	subi	r24, 0xF4	; 244
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	a0 e0       	ldi	r26, 0x00	; 0
 80e:	b0 e0       	ldi	r27, 0x00	; 0
 810:	ab bf       	out	0x3b, r26	; 59
 812:	fc 01       	movw	r30, r24
 814:	d7 90       	elpm	r13, Z+
 816:	3d 2d       	mov	r19, r13
 818:	3a 32       	cpi	r19, 0x2A	; 42
 81a:	29 f0       	breq	.+10     	; 0x826 <main+0x30e>
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	a4 16       	cp	r10, r20
 820:	42 e0       	ldi	r20, 0x02	; 2
 822:	b4 06       	cpc	r11, r20
 824:	d9 f6       	brne	.-74     	; 0x7dc <main+0x2c4>
		if (theEEPROMchar != theChar) {
			errorCount++;
		}
		ii++;
	}
	PrintNewLine();
 826:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	PrintNewLine();
 82a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	PrintFromPROGMEM(gTextMsg_EEPROMerrorCnt, 0);
 82e:	85 e6       	ldi	r24, 0x65	; 101
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
	PrintDecInt(errorCount, 1);
 838:	c8 01       	movw	r24, r16
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	70 e0       	ldi	r23, 0x00	; 0
 83e:	0e 94 57 02 	call	0x4ae	; 0x4ae <PrintDecInt>
	PrintNewLine();
 842:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	PrintNewLine();
 846:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	gEepromIndex	=	0;				//*	set index back to zero for next eeprom dump
 84a:	10 92 02 01 	sts	0x0102, r1
 84e:	10 92 03 01 	sts	0x0103, r1
 852:	10 92 04 01 	sts	0x0104, r1
 856:	10 92 05 01 	sts	0x0105, r1
 85a:	a4 ce       	rjmp	.-696    	; 0x5a4 <main+0x8c>
		//			PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 2);
		//			BlinkLED();
		//			break;

		case 'E':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 2);
 85c:	82 ea       	ldi	r24, 0xA2	; 162
 85e:	91 e0       	ldi	r25, 0x01	; 1
 860:	62 e0       	ldi	r22, 0x02	; 2
 862:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
			DumpHex(kDUMP_EEPROM, gEepromIndex, 16);
 866:	40 91 02 01 	lds	r20, 0x0102
 86a:	50 91 03 01 	lds	r21, 0x0103
 86e:	60 91 04 01 	lds	r22, 0x0104
 872:	70 91 05 01 	lds	r23, 0x0105
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	0e 94 a5 01 	call	0x34a	; 0x34a <DumpHex.clone.0>
			gEepromIndex	+=	256;
 87c:	80 91 02 01 	lds	r24, 0x0102
 880:	90 91 03 01 	lds	r25, 0x0103
 884:	a0 91 04 01 	lds	r26, 0x0104
 888:	b0 91 05 01 	lds	r27, 0x0105
 88c:	80 50       	subi	r24, 0x00	; 0
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	af 4f       	sbci	r26, 0xFF	; 255
 892:	bf 4f       	sbci	r27, 0xFF	; 255
 894:	80 93 02 01 	sts	0x0102, r24
 898:	90 93 03 01 	sts	0x0103, r25
 89c:	a0 93 04 01 	sts	0x0104, r26
 8a0:	b0 93 05 01 	sts	0x0105, r27
			if (gEepromIndex > E2END) {
 8a4:	80 30       	cpi	r24, 0x00	; 0
 8a6:	50 e1       	ldi	r21, 0x10	; 16
 8a8:	95 07       	cpc	r25, r21
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	a5 07       	cpc	r26, r21
 8ae:	50 e0       	ldi	r21, 0x00	; 0
 8b0:	b5 07       	cpc	r27, r21
 8b2:	08 f4       	brcc	.+2      	; 0x8b6 <main+0x39e>
 8b4:	77 ce       	rjmp	.-786    	; 0x5a4 <main+0x8c>
 8b6:	c9 cf       	rjmp	.-110    	; 0x84a <main+0x332>
				gEepromIndex	=	0;
			}
			break;

		case 'F':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 2);
 8b8:	82 eb       	ldi	r24, 0xB2	; 178
 8ba:	91 e0       	ldi	r25, 0x01	; 1
 8bc:	62 e0       	ldi	r22, 0x02	; 2
 8be:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
			DumpHex(kDUMP_FLASH, gFlashIndex, 16);
 8c2:	40 91 06 01 	lds	r20, 0x0106
 8c6:	50 91 07 01 	lds	r21, 0x0107
 8ca:	60 91 08 01 	lds	r22, 0x0108
 8ce:	70 91 09 01 	lds	r23, 0x0109
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	0e 94 a5 01 	call	0x34a	; 0x34a <DumpHex.clone.0>
			gFlashIndex	+=	256;
 8d8:	80 91 06 01 	lds	r24, 0x0106
 8dc:	90 91 07 01 	lds	r25, 0x0107
 8e0:	a0 91 08 01 	lds	r26, 0x0108
 8e4:	b0 91 09 01 	lds	r27, 0x0109
 8e8:	80 50       	subi	r24, 0x00	; 0
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	af 4f       	sbci	r26, 0xFF	; 255
 8ee:	bf 4f       	sbci	r27, 0xFF	; 255
 8f0:	80 93 06 01 	sts	0x0106, r24
 8f4:	90 93 07 01 	sts	0x0107, r25
 8f8:	a0 93 08 01 	sts	0x0108, r26
 8fc:	b0 93 09 01 	sts	0x0109, r27
 900:	51 ce       	rjmp	.-862    	; 0x5a4 <main+0x8c>
			break;

		case 'H':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
 902:	81 ec       	ldi	r24, 0xC1	; 193
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	62 e0       	ldi	r22, 0x02	; 2
 908:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>


//*******************************************************************
static void PrintHelp(void)
{
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_0, 0);
 90c:	86 e7       	ldi	r24, 0x76	; 118
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	60 e0       	ldi	r22, 0x00	; 0
 912:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_QM, 0);
 916:	84 e8       	ldi	r24, 0x84	; 132
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_AT, 0);
 920:	82 e9       	ldi	r24, 0x92	; 146
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	//	PrintFromPROGMEMln(gTextMsg_HELP_MSG_B, 0);
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_E, 0);
 92a:	82 ea       	ldi	r24, 0xA2	; 162
 92c:	91 e0       	ldi	r25, 0x01	; 1
 92e:	60 e0       	ldi	r22, 0x00	; 0
 930:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_F, 0);
 934:	82 eb       	ldi	r24, 0xB2	; 178
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 0);
 93e:	81 ec       	ldi	r24, 0xC1	; 193
 940:	91 e0       	ldi	r25, 0x01	; 1
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 0);
 948:	8a ec       	ldi	r24, 0xCA	; 202
 94a:	91 e0       	ldi	r25, 0x01	; 1
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 0);
 952:	8d ed       	ldi	r24, 0xDD	; 221
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 0);
 95c:	86 ee       	ldi	r24, 0xE6	; 230
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	60 e0       	ldi	r22, 0x00	; 0
 962:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 0);
 966:	83 ef       	ldi	r24, 0xF3	; 243
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 0);
 970:	8e e0       	ldi	r24, 0x0E	; 14
 972:	92 e0       	ldi	r25, 0x02	; 2
 974:	14 ce       	rjmp	.-984    	; 0x59e <main+0x86>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_H, 2);
			PrintHelp();
			break;

		case 'L':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
 976:	8a ec       	ldi	r24, 0xCA	; 202
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	62 e0       	ldi	r22, 0x02	; 2
 97c:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
//************************************************************************
static void	ListAvailablePorts(void)
{

#ifdef DDRA
	PrintAvailablePort('A');
 980:	81 e4       	ldi	r24, 0x41	; 65
 982:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
#endif

#ifdef DDRB
	PrintAvailablePort('B');
 986:	82 e4       	ldi	r24, 0x42	; 66
 988:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
#endif

#ifdef DDRC
	PrintAvailablePort('C');
 98c:	83 e4       	ldi	r24, 0x43	; 67
 98e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
#endif

#ifdef DDRD
	PrintAvailablePort('D');
 992:	84 e4       	ldi	r24, 0x44	; 68
 994:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
#endif

#ifdef DDRE
	PrintAvailablePort('E');
 998:	85 e4       	ldi	r24, 0x45	; 69
 99a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
#endif

#ifdef DDRF
	PrintAvailablePort('F');
 99e:	86 e4       	ldi	r24, 0x46	; 70
 9a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <PrintAvailablePort>
 9a4:	ff cd       	rjmp	.-1026   	; 0x5a4 <main+0x8c>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_L, 2);
			ListAvailablePorts();
			break;

		case 'Q':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
 9a6:	8d ed       	ldi	r24, 0xDD	; 221
 9a8:	91 e0       	ldi	r25, 0x01	; 1
 9aa:	62 e0       	ldi	r22, 0x02	; 2
 9ac:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>

	asm volatile ("nop");					// wait until port has changed

	RunMonitor();

	asm volatile ("nop");					// wait until port has changed
 9b0:	00 00       	nop

	/*
	* Now leave bootloader
	*/

	UART_STATUS_REG &=	0xfd;
 9b2:	80 91 c8 00 	lds	r24, 0x00C8
 9b6:	8d 7f       	andi	r24, 0xFD	; 253
 9b8:	80 93 c8 00 	sts	0x00C8, r24
	boot_rww_enable();					// enable application section
 9bc:	81 e1       	ldi	r24, 0x11	; 17
 9be:	80 93 57 00 	sts	0x0057, r24
 9c2:	e8 95       	spm


	asm volatile (
 9c4:	ee 27       	eor	r30, r30
 9c6:	ff 27       	eor	r31, r31
 9c8:	09 94       	ijmp
 9ca:	fd c1       	rjmp	.+1018   	; 0xdc6 <main+0x8ae>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_Q, 2);
			keepGoing	=	false;
			break;

		case 'R':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_R, 2);
 9cc:	86 ee       	ldi	r24, 0xE6	; 230
 9ce:	91 e0       	ldi	r25, 0x01	; 1
 9d0:	62 e0       	ldi	r22, 0x02	; 2
 9d2:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
			DumpHex(kDUMP_RAM, gRamIndex, 16);
 9d6:	40 91 0a 01 	lds	r20, 0x010A
 9da:	50 91 0b 01 	lds	r21, 0x010B
 9de:	60 91 0c 01 	lds	r22, 0x010C
 9e2:	70 91 0d 01 	lds	r23, 0x010D
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	0e 94 a5 01 	call	0x34a	; 0x34a <DumpHex.clone.0>
			gRamIndex	+=	256;
 9ec:	80 91 0a 01 	lds	r24, 0x010A
 9f0:	90 91 0b 01 	lds	r25, 0x010B
 9f4:	a0 91 0c 01 	lds	r26, 0x010C
 9f8:	b0 91 0d 01 	lds	r27, 0x010D
 9fc:	80 50       	subi	r24, 0x00	; 0
 9fe:	9f 4f       	sbci	r25, 0xFF	; 255
 a00:	af 4f       	sbci	r26, 0xFF	; 255
 a02:	bf 4f       	sbci	r27, 0xFF	; 255
 a04:	80 93 0a 01 	sts	0x010A, r24
 a08:	90 93 0b 01 	sts	0x010B, r25
 a0c:	a0 93 0c 01 	sts	0x010C, r26
 a10:	b0 93 0d 01 	sts	0x010D, r27
 a14:	c7 cd       	rjmp	.-1138   	; 0x5a4 <main+0x8c>
			break;

		case 'V':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
 a16:	83 ef       	ldi	r24, 0xF3	; 243
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	62 e0       	ldi	r22, 0x02	; 2
 a1c:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	long stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
 a2a:	8a ed       	ldi	r24, 0xDA	; 218
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	60 e0       	ldi	r22, 0x00	; 0
 a30:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
#if defined(_INTERRUPT_NAMES_DEFINED_)
	long stringPointer;
#endif

	myMemoryPtr		=	0;
	vectorIndex		=	0;
 a34:	22 24       	eor	r2, r2
 a36:	33 24       	eor	r3, r3

#if defined(_INTERRUPT_NAMES_DEFINED_)
	long stringPointer;
#endif

	myMemoryPtr		=	0;
 a38:	66 24       	eor	r6, r6
 a3a:	77 24       	eor	r7, r7
 a3c:	43 01       	movw	r8, r6
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					V#   ADDR   op code
	//					1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount) {
		wordMemoryAddress	=	myMemoryPtr / 2;
 a3e:	d4 01       	movw	r26, r8
 a40:	c3 01       	movw	r24, r6
 a42:	b6 95       	lsr	r27
 a44:	a7 95       	ror	r26
 a46:	97 95       	ror	r25
 a48:	87 95       	ror	r24
 a4a:	89 83       	std	Y+1, r24	; 0x01
 a4c:	9a 83       	std	Y+2, r25	; 0x02
 a4e:	ab 83       	std	Y+3, r26	; 0x03
 a50:	bc 83       	std	Y+4, r27	; 0x04
		//					01 - 0000 = 12 34
		PrintDecInt(vectorIndex + 1, 2);
 a52:	08 94       	sec
 a54:	21 1c       	adc	r2, r1
 a56:	31 1c       	adc	r3, r1
 a58:	c1 01       	movw	r24, r2
 a5a:	62 e0       	ldi	r22, 0x02	; 2
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	0e 94 57 02 	call	0x4ae	; 0x4ae <PrintDecInt>
		sendchar(0x20);
 a62:	80 e2       	ldi	r24, 0x20	; 32
 a64:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar('-');
 a68:	8d e2       	ldi	r24, 0x2D	; 45
 a6a:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar(0x20);
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		PrintHexByte((wordMemoryAddress >> 8) & 0x00ff);
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		PrintHexByte((wordMemoryAddress) & 0x00ff);
 a7a:	89 81       	ldd	r24, Y+1	; 0x01
 a7c:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar('=');
 a86:	8d e3       	ldi	r24, 0x3D	; 61
 a88:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		sendchar(0x20);
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>


		//*	the AVR is LITTLE ENDIAN, swap the byte order
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
 a92:	8b be       	out	0x3b, r8	; 59
 a94:	f3 01       	movw	r30, r6
 a96:	d7 90       	elpm	r13, Z+
 a98:	2d 2d       	mov	r18, r13
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	40 e0       	ldi	r20, 0x00	; 0
 a9e:	50 e0       	ldi	r21, 0x00	; 0
 aa0:	2d 83       	std	Y+5, r18	; 0x05
 aa2:	3e 83       	std	Y+6, r19	; 0x06
 aa4:	4f 83       	std	Y+7, r20	; 0x07
 aa6:	58 87       	std	Y+8, r21	; 0x08
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
 aa8:	d4 01       	movw	r26, r8
 aaa:	c3 01       	movw	r24, r6
 aac:	01 96       	adiw	r24, 0x01	; 1
 aae:	a1 1d       	adc	r26, r1
 ab0:	b1 1d       	adc	r27, r1
 ab2:	ab bf       	out	0x3b, r26	; 59
 ab4:	fc 01       	movw	r30, r24
 ab6:	a7 91       	elpm	r26, Z+
 ab8:	2a 2f       	mov	r18, r26
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	40 e0       	ldi	r20, 0x00	; 0
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	29 87       	std	Y+9, r18	; 0x09
 ac2:	3a 87       	std	Y+10, r19	; 0x0a
 ac4:	4b 87       	std	Y+11, r20	; 0x0b
 ac6:	5c 87       	std	Y+12, r21	; 0x0c
 ac8:	c4 01       	movw	r24, r8
 aca:	b3 01       	movw	r22, r6
 acc:	6d 5f       	subi	r22, 0xFD	; 253
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
 ad4:	a4 01       	movw	r20, r8
 ad6:	93 01       	movw	r18, r6
 ad8:	2e 5f       	subi	r18, 0xFE	; 254
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	4f 4f       	sbci	r20, 0xFF	; 255
 ade:	5f 4f       	sbci	r21, 0xFF	; 255
 ae0:	4b bf       	out	0x3b, r20	; 59
 ae2:	f9 01       	movw	r30, r18
 ae4:	57 90       	elpm	r5, Z+
 ae6:	24 e0       	ldi	r18, 0x04	; 4
 ae8:	30 e0       	ldi	r19, 0x00	; 0
 aea:	40 e0       	ldi	r20, 0x00	; 0
 aec:	50 e0       	ldi	r21, 0x00	; 0
 aee:	62 0e       	add	r6, r18
 af0:	73 1e       	adc	r7, r19
 af2:	84 1e       	adc	r8, r20
 af4:	95 1e       	adc	r9, r21
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
 af6:	8b bf       	out	0x3b, r24	; 59
 af8:	fb 01       	movw	r30, r22
 afa:	a7 90       	elpm	r10, Z+
		byte1	=	pgm_read_byte_near(myMemoryPtr++);
		byte2	=	pgm_read_byte_near(myMemoryPtr++);
		byte3	=	pgm_read_byte_near(myMemoryPtr++);
		byte4	=	pgm_read_byte_near(myMemoryPtr++);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		word1	=	(byte2 << 8) + byte1;
 afc:	29 85       	ldd	r18, Y+9	; 0x09
 afe:	3a 85       	ldd	r19, Y+10	; 0x0a
 b00:	4b 85       	ldd	r20, Y+11	; 0x0b
 b02:	5c 85       	ldd	r21, Y+12	; 0x0c
 b04:	ee 24       	eor	r14, r14
 b06:	f2 2e       	mov	r15, r18
 b08:	03 2f       	mov	r16, r19
 b0a:	14 2f       	mov	r17, r20
 b0c:	2d 81       	ldd	r18, Y+5	; 0x05
 b0e:	3e 81       	ldd	r19, Y+6	; 0x06
 b10:	4f 81       	ldd	r20, Y+7	; 0x07
 b12:	58 85       	ldd	r21, Y+8	; 0x08
 b14:	e2 0e       	add	r14, r18
 b16:	f3 1e       	adc	r15, r19
 b18:	04 1f       	adc	r16, r20
 b1a:	15 1f       	adc	r17, r21
		word2	=	(byte4 << 8) + byte3;


		PrintHexByte(byte2);
 b1c:	8a 2f       	mov	r24, r26
 b1e:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		PrintHexByte(byte1);
 b28:	8d 2d       	mov	r24, r13
 b2a:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		PrintHexByte(byte4);
 b34:	8a 2d       	mov	r24, r10
 b36:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
		PrintHexByte(byte3);
 b40:	85 2d       	mov	r24, r5
 b42:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
		sendchar(0x20);
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>

		if (word1 == 0xffff) {
 b4c:	3f ef       	ldi	r19, 0xFF	; 255
 b4e:	e3 16       	cp	r14, r19
 b50:	3f ef       	ldi	r19, 0xFF	; 255
 b52:	f3 06       	cpc	r15, r19
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	03 07       	cpc	r16, r19
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	13 07       	cpc	r17, r19
 b5c:	31 f4       	brne	.+12     	; 0xb6a <main+0x652>
			PrintFromPROGMEM(gTextMsg_noVector, 0);
 b5e:	87 e0       	ldi	r24, 0x07	; 7
 b60:	91 e0       	ldi	r25, 0x01	; 1
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
 b68:	9c c0       	rjmp	.+312    	; 0xca2 <main+0x78a>
		}
		else if ((word1 & 0xc000) == 0xc000) {
 b6a:	a8 01       	movw	r20, r16
 b6c:	97 01       	movw	r18, r14
 b6e:	20 70       	andi	r18, 0x00	; 0
 b70:	30 7c       	andi	r19, 0xC0	; 192
 b72:	40 70       	andi	r20, 0x00	; 0
 b74:	50 70       	andi	r21, 0x00	; 0
 b76:	20 30       	cpi	r18, 0x00	; 0
 b78:	80 ec       	ldi	r24, 0xC0	; 192
 b7a:	38 07       	cpc	r19, r24
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	48 07       	cpc	r20, r24
 b80:	80 e0       	ldi	r24, 0x00	; 0
 b82:	58 07       	cpc	r21, r24
 b84:	e1 f4       	brne	.+56     	; 0xbbe <main+0x6a6>
			//*	rjmp instruction
			realitiveAddr	=	word1 & 0x3FFF;
 b86:	7f ef       	ldi	r23, 0xFF	; 255
 b88:	a7 2e       	mov	r10, r23
 b8a:	7f e3       	ldi	r23, 0x3F	; 63
 b8c:	b7 2e       	mov	r11, r23
 b8e:	c1 2c       	mov	r12, r1
 b90:	d1 2c       	mov	r13, r1
 b92:	ae 20       	and	r10, r14
 b94:	bf 20       	and	r11, r15
 b96:	c0 22       	and	r12, r16
 b98:	d1 22       	and	r13, r17
			absoluteAddr	=	wordMemoryAddress + realitiveAddr;	 //*	add the offset to the current address
 b9a:	e9 80       	ldd	r14, Y+1	; 0x01
 b9c:	fa 80       	ldd	r15, Y+2	; 0x02
 b9e:	0b 81       	ldd	r16, Y+3	; 0x03
 ba0:	1c 81       	ldd	r17, Y+4	; 0x04
 ba2:	ea 0c       	add	r14, r10
 ba4:	fb 1c       	adc	r15, r11
 ba6:	0c 1d       	adc	r16, r12
 ba8:	1d 1d       	adc	r17, r13
			absoluteAddr	=	absoluteAddr << 1;		 //*	multiply by 2 for byte address
 baa:	ee 0c       	add	r14, r14
 bac:	ff 1c       	adc	r15, r15
 bae:	00 1f       	adc	r16, r16
 bb0:	11 1f       	adc	r17, r17

			PrintFromPROGMEM(gTextMsg_rjmp, 0);
 bb2:	81 e1       	ldi	r24, 0x11	; 17
 bb4:	91 e0       	ldi	r25, 0x01	; 1
 bb6:	60 e0       	ldi	r22, 0x00	; 0
 bb8:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
 bbc:	5d c0       	rjmp	.+186    	; 0xc78 <main+0x760>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
			PrintHexByte((absoluteAddr) & 0x00ff);

		}
		else if ((word1 & 0xfE0E) == 0x940c) {
 bbe:	d8 01       	movw	r26, r16
 bc0:	c7 01       	movw	r24, r14
 bc2:	8e 70       	andi	r24, 0x0E	; 14
 bc4:	9e 7f       	andi	r25, 0xFE	; 254
 bc6:	a0 70       	andi	r26, 0x00	; 0
 bc8:	b0 70       	andi	r27, 0x00	; 0
 bca:	8c 30       	cpi	r24, 0x0C	; 12
 bcc:	e4 e9       	ldi	r30, 0x94	; 148
 bce:	9e 07       	cpc	r25, r30
 bd0:	e0 e0       	ldi	r30, 0x00	; 0
 bd2:	ae 07       	cpc	r26, r30
 bd4:	e0 e0       	ldi	r30, 0x00	; 0
 bd6:	be 07       	cpc	r27, r30
 bd8:	09 f0       	breq	.+2      	; 0xbdc <main+0x6c4>
 bda:	63 c0       	rjmp	.+198    	; 0xca2 <main+0x78a>
		//*	the AVR is LITTLE ENDIAN, swap the byte order
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#if (FLASHEND > 0x10000)
		byte1	=	pgm_read_byte_far(myMemoryPtr++);
		byte2	=	pgm_read_byte_far(myMemoryPtr++);
		byte3	=	pgm_read_byte_far(myMemoryPtr++);
		byte4	=	pgm_read_byte_far(myMemoryPtr++);
 bdc:	bb 24       	eor	r11, r11
 bde:	cc 24       	eor	r12, r12
 be0:	dd 24       	eor	r13, r13
		byte2	=	pgm_read_byte_near(myMemoryPtr++);
		byte3	=	pgm_read_byte_near(myMemoryPtr++);
		byte4	=	pgm_read_byte_near(myMemoryPtr++);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		word1	=	(byte2 << 8) + byte1;
		word2	=	(byte4 << 8) + byte3;
 be2:	dc 2c       	mov	r13, r12
 be4:	cb 2c       	mov	r12, r11
 be6:	ba 2c       	mov	r11, r10
 be8:	aa 24       	eor	r10, r10
			PrintHexByte((absoluteAddr) & 0x00ff);

		}
		else if ((word1 & 0xfE0E) == 0x940c) {
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
 bea:	a5 0c       	add	r10, r5
 bec:	b1 1c       	adc	r11, r1
 bee:	c1 1c       	adc	r12, r1
 bf0:	d1 1c       	adc	r13, r1
 bf2:	8d 81       	ldd	r24, Y+5	; 0x05
 bf4:	9e 81       	ldd	r25, Y+6	; 0x06
 bf6:	af 81       	ldd	r26, Y+7	; 0x07
 bf8:	b8 85       	ldd	r27, Y+8	; 0x08
 bfa:	81 70       	andi	r24, 0x01	; 1
 bfc:	90 70       	andi	r25, 0x00	; 0
 bfe:	a0 70       	andi	r26, 0x00	; 0
 c00:	b0 70       	andi	r27, 0x00	; 0
 c02:	dc 01       	movw	r26, r24
 c04:	99 27       	eor	r25, r25
 c06:	88 27       	eor	r24, r24
							((byte1 & 0xf0) << 17) +
 c08:	a8 0e       	add	r10, r24
 c0a:	b9 1e       	adc	r11, r25
 c0c:	ca 1e       	adc	r12, r26
 c0e:	db 1e       	adc	r13, r27
 c10:	8d 81       	ldd	r24, Y+5	; 0x05
 c12:	9e 81       	ldd	r25, Y+6	; 0x06
 c14:	af 81       	ldd	r26, Y+7	; 0x07
 c16:	b8 85       	ldd	r27, Y+8	; 0x08
 c18:	80 7f       	andi	r24, 0xF0	; 240
 c1a:	90 70       	andi	r25, 0x00	; 0
 c1c:	a0 70       	andi	r26, 0x00	; 0
 c1e:	b0 70       	andi	r27, 0x00	; 0
 c20:	31 e1       	ldi	r19, 0x11	; 17
 c22:	88 0f       	add	r24, r24
 c24:	99 1f       	adc	r25, r25
 c26:	aa 1f       	adc	r26, r26
 c28:	bb 1f       	adc	r27, r27
 c2a:	3a 95       	dec	r19
 c2c:	d1 f7       	brne	.-12     	; 0xc22 <main+0x70a>
		byte2	=	pgm_read_byte_near(myMemoryPtr++);
		byte3	=	pgm_read_byte_near(myMemoryPtr++);
		byte4	=	pgm_read_byte_near(myMemoryPtr++);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		word1	=	(byte2 << 8) + byte1;
		word2	=	(byte4 << 8) + byte3;
 c2e:	a8 0e       	add	r10, r24
 c30:	b9 1e       	adc	r11, r25
 c32:	ca 1e       	adc	r12, r26
 c34:	db 1e       	adc	r13, r27
		}
		else if ((word1 & 0xfE0E) == 0x940c) {
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
							((byte1 & 0xf0) << 17) +
							((byte2 & 0x01) << 21) +
 c36:	89 85       	ldd	r24, Y+9	; 0x09
 c38:	9a 85       	ldd	r25, Y+10	; 0x0a
 c3a:	ab 85       	ldd	r26, Y+11	; 0x0b
 c3c:	bc 85       	ldd	r27, Y+12	; 0x0c
 c3e:	81 70       	andi	r24, 0x01	; 1
 c40:	90 70       	andi	r25, 0x00	; 0
 c42:	a0 70       	andi	r26, 0x00	; 0
 c44:	b0 70       	andi	r27, 0x00	; 0
 c46:	25 e1       	ldi	r18, 0x15	; 21
 c48:	88 0f       	add	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	aa 1f       	adc	r26, r26
 c4e:	bb 1f       	adc	r27, r27
 c50:	2a 95       	dec	r18
 c52:	d1 f7       	brne	.-12     	; 0xc48 <main+0x730>
			PrintHexByte((absoluteAddr) & 0x00ff);

		}
		else if ((word1 & 0xfE0E) == 0x940c) {
			//*	jmp instruction, this is REALLY complicated, refer to the instruction manual (JMP)
			myFullAddress	=	((byte1 & 0x01) << 16) +
 c54:	a8 0e       	add	r10, r24
 c56:	b9 1e       	adc	r11, r25
 c58:	ca 1e       	adc	r12, r26
 c5a:	db 1e       	adc	r13, r27
							((byte1 & 0xf0) << 17) +
							((byte2 & 0x01) << 21) +
							word2;

			absoluteAddr	=	myFullAddress << 1;
 c5c:	86 01       	movw	r16, r12
 c5e:	75 01       	movw	r14, r10
 c60:	ee 0c       	add	r14, r14
 c62:	ff 1c       	adc	r15, r15
 c64:	00 1f       	adc	r16, r16
 c66:	11 1f       	adc	r17, r17

			PrintFromPROGMEM(gTextMsg_jmp, 0);
 c68:	88 e1       	ldi	r24, 0x18	; 24
 c6a:	91 e0       	ldi	r25, 0x01	; 1
 c6c:	60 e0       	ldi	r22, 0x00	; 0
 c6e:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>
			PrintHexByte((myFullAddress >> 16) & 0x00ff);
 c72:	8c 2d       	mov	r24, r12
 c74:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			PrintHexByte((myFullAddress >> 8) & 0x00ff);
 c78:	8b 2d       	mov	r24, r11
 c7a:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			PrintHexByte((myFullAddress) & 0x00ff);
 c7e:	8a 2d       	mov	r24, r10
 c80:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			sendchar(0x20);
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
			sendchar('>');
 c8a:	8e e3       	ldi	r24, 0x3E	; 62
 c8c:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
			PrintHexByte((absoluteAddr >> 16) & 0x00ff);
 c90:	80 2f       	mov	r24, r16
 c92:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			PrintHexByte((absoluteAddr >> 8) & 0x00ff);
 c96:	8f 2d       	mov	r24, r15
 c98:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
			PrintHexByte((absoluteAddr) & 0x00ff);
 c9c:	8e 2d       	mov	r24, r14
 c9e:	0e 94 8f 01 	call	0x31e	; 0x31e <PrintHexByte>
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#else
		stringPointer	=	pgm_read_word_near(&(gInterruptNameTable[vectorIndex]));
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		PrintFromPROGMEM((char*)stringPointer, 0);
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif
		PrintNewLine();
 ca2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>
	vectorIndex		=	0;
	PrintFromPROGMEMln(gTextMsg_CPU_Name, 0);
	PrintFromPROGMEMln(gTextMsg_VECTOR_HEADER, 0);
	//					V#   ADDR   op code
	//					1 - 0000 = C3 BB 00 00 rjmp 03BB >000776 RESET
	while (vectorIndex < kInterruptVectorCount) {
 ca6:	f6 e2       	ldi	r31, 0x26	; 38
 ca8:	2f 16       	cp	r2, r31
 caa:	31 04       	cpc	r3, r1
 cac:	09 f0       	breq	.+2      	; 0xcb0 <main+0x798>
 cae:	c7 ce       	rjmp	.-626    	; 0xa3e <main+0x526>
 cb0:	79 cc       	rjmp	.-1806   	; 0x5a4 <main+0x8c>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_V, 2);
			VectorDisplay();
			break;

		case 'Y':
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
 cb2:	8e e0       	ldi	r24, 0x0E	; 14
 cb4:	92 e0       	ldi	r25, 0x02	; 2
 cb6:	62 e0       	ldi	r22, 0x02	; 2
 cb8:	0e 94 76 01 	call	0x2ec	; 0x2ec <PrintFromPROGMEMln>
static void	AVR_PortOutput(void)
{
	char portLetter;
	char getCharFlag;

	PrintFromPROGMEM(gTextMsg_WHAT_PORT, 0);
 cbc:	8d e1       	ldi	r24, 0x1D	; 29
 cbe:	91 e0       	ldi	r25, 0x01	; 1
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	0e 94 4d 01 	call	0x29a	; 0x29a <PrintFromPROGMEM>

	portLetter	=	recchar();
 cc6:	0e 94 2c 01 	call	0x258	; 0x258 <recchar>
	portLetter	=	portLetter & 0x5f;
 cca:	08 2f       	mov	r16, r24
 ccc:	0f 75       	andi	r16, 0x5F	; 95
	sendchar(portLetter);
 cce:	80 2f       	mov	r24, r16
 cd0:	0e 94 20 01 	call	0x240	; 0x240 <sendchar>
	PrintNewLine();
 cd4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <PrintNewLine>

	if ((portLetter >= 'A') && (portLetter <= 'Z')) {
 cd8:	80 2f       	mov	r24, r16
 cda:	81 54       	subi	r24, 0x41	; 65
 cdc:	8a 31       	cpi	r24, 0x1A	; 26
 cde:	08 f0       	brcs	.+2      	; 0xce2 <main+0x7ca>
 ce0:	6c c0       	rjmp	.+216    	; 0xdba <main+0x8a2>
		getCharFlag	=	true;
		switch (portLetter) {
 ce2:	03 34       	cpi	r16, 0x43	; 67
 ce4:	61 f1       	breq	.+88     	; 0xd3e <main+0x826>
 ce6:	04 34       	cpi	r16, 0x44	; 68
 ce8:	30 f4       	brcc	.+12     	; 0xcf6 <main+0x7de>
 cea:	01 34       	cpi	r16, 0x41	; 65
 cec:	61 f0       	breq	.+24     	; 0xd06 <main+0x7ee>
 cee:	02 34       	cpi	r16, 0x42	; 66
 cf0:	09 f0       	breq	.+2      	; 0xcf4 <main+0x7dc>
 cf2:	5d c0       	rjmp	.+186    	; 0xdae <main+0x896>
 cf4:	16 c0       	rjmp	.+44     	; 0xd22 <main+0x80a>
 cf6:	05 34       	cpi	r16, 0x45	; 69
 cf8:	f1 f1       	breq	.+124    	; 0xd76 <main+0x85e>
 cfa:	05 34       	cpi	r16, 0x45	; 69
 cfc:	70 f1       	brcs	.+92     	; 0xd5a <main+0x842>
 cfe:	06 34       	cpi	r16, 0x46	; 70
 d00:	09 f0       	breq	.+2      	; 0xd04 <main+0x7ec>
 d02:	55 c0       	rjmp	.+170    	; 0xdae <main+0x896>
 d04:	46 c0       	rjmp	.+140    	; 0xd92 <main+0x87a>
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRA
		case 'A':
			DDRA	=	0xff;
 d06:	8f ef       	ldi	r24, 0xFF	; 255
 d08:	81 b9       	out	0x01, r24	; 1
 d0a:	05 c0       	rjmp	.+10     	; 0xd16 <main+0x7fe>
			while (!Serial_Available()) {
				PORTA	^=	0xff;
 d0c:	82 b1       	in	r24, 0x02	; 2
 d0e:	80 95       	com	r24
 d10:	82 b9       	out	0x02, r24	; 2
				delay_ms(200);
 d12:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 d16:	80 91 c8 00 	lds	r24, 0x00C8
		getCharFlag	=	true;
		switch (portLetter) {
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRA
		case 'A':
			DDRA	=	0xff;
			while (!Serial_Available()) {
 d1a:	87 ff       	sbrs	r24, 7
 d1c:	f7 cf       	rjmp	.-18     	; 0xd0c <main+0x7f4>
				PORTA	^=	0xff;
				delay_ms(200);
			}
			PORTA	=	0;
 d1e:	12 b8       	out	0x02, r1	; 2
 d20:	49 c0       	rjmp	.+146    	; 0xdb4 <main+0x89c>
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRB
		case 'B':
			DDRB	=	0xff;
 d22:	8f ef       	ldi	r24, 0xFF	; 255
 d24:	84 b9       	out	0x04, r24	; 4
 d26:	05 c0       	rjmp	.+10     	; 0xd32 <main+0x81a>
			while (!Serial_Available()) {
				PORTB	^=	0xff;
 d28:	85 b1       	in	r24, 0x05	; 5
 d2a:	80 95       	com	r24
 d2c:	85 b9       	out	0x05, r24	; 5
				delay_ms(200);
 d2e:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 d32:	80 91 c8 00 	lds	r24, 0x00C8
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRB
		case 'B':
			DDRB	=	0xff;
			while (!Serial_Available()) {
 d36:	87 ff       	sbrs	r24, 7
 d38:	f7 cf       	rjmp	.-18     	; 0xd28 <main+0x810>
				PORTB	^=	0xff;
				delay_ms(200);
			}
			PORTB	=	0;
 d3a:	15 b8       	out	0x05, r1	; 5
 d3c:	3b c0       	rjmp	.+118    	; 0xdb4 <main+0x89c>
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRC
		case 'C':
			DDRC	=	0xff;
 d3e:	8f ef       	ldi	r24, 0xFF	; 255
 d40:	87 b9       	out	0x07, r24	; 7
 d42:	05 c0       	rjmp	.+10     	; 0xd4e <main+0x836>
			while (!Serial_Available()) {
				PORTC	^=	0xff;
 d44:	88 b1       	in	r24, 0x08	; 8
 d46:	80 95       	com	r24
 d48:	88 b9       	out	0x08, r24	; 8
				delay_ms(200);
 d4a:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 d4e:	80 91 c8 00 	lds	r24, 0x00C8
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRC
		case 'C':
			DDRC	=	0xff;
			while (!Serial_Available()) {
 d52:	87 ff       	sbrs	r24, 7
 d54:	f7 cf       	rjmp	.-18     	; 0xd44 <main+0x82c>
				PORTC	^=	0xff;
				delay_ms(200);
			}
			PORTC	=	0;
 d56:	18 b8       	out	0x08, r1	; 8
 d58:	2d c0       	rjmp	.+90     	; 0xdb4 <main+0x89c>
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRD
		case 'D':
			DDRD	=	0xff;
 d5a:	8f ef       	ldi	r24, 0xFF	; 255
 d5c:	8a b9       	out	0x0a, r24	; 10
 d5e:	05 c0       	rjmp	.+10     	; 0xd6a <main+0x852>
			while (!Serial_Available()) {
				PORTD	^=	0xff;
 d60:	8b b1       	in	r24, 0x0b	; 11
 d62:	80 95       	com	r24
 d64:	8b b9       	out	0x0b, r24	; 11
				delay_ms(200);
 d66:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 d6a:	80 91 c8 00 	lds	r24, 0x00C8
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRD
		case 'D':
			DDRD	=	0xff;
			while (!Serial_Available()) {
 d6e:	87 ff       	sbrs	r24, 7
 d70:	f7 cf       	rjmp	.-18     	; 0xd60 <main+0x848>
				PORTD	^=	0xff;
				delay_ms(200);
			}
			PORTD	=	0;
 d72:	1b b8       	out	0x0b, r1	; 11
 d74:	1f c0       	rjmp	.+62     	; 0xdb4 <main+0x89c>
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRE
		case 'E':
			DDRE	=	0xff;
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	8d b9       	out	0x0d, r24	; 13
 d7a:	05 c0       	rjmp	.+10     	; 0xd86 <main+0x86e>
			while (!Serial_Available()) {
				PORTE	^=	0xff;
 d7c:	8e b1       	in	r24, 0x0e	; 14
 d7e:	80 95       	com	r24
 d80:	8e b9       	out	0x0e, r24	; 14
				delay_ms(200);
 d82:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 d86:	80 91 c8 00 	lds	r24, 0x00C8
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRE
		case 'E':
			DDRE	=	0xff;
			while (!Serial_Available()) {
 d8a:	87 ff       	sbrs	r24, 7
 d8c:	f7 cf       	rjmp	.-18     	; 0xd7c <main+0x864>
				PORTE	^=	0xff;
				delay_ms(200);
			}
			PORTE	=	0;
 d8e:	1e b8       	out	0x0e, r1	; 14
 d90:	11 c0       	rjmp	.+34     	; 0xdb4 <main+0x89c>
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRF
		case 'F':
			DDRF	=	0xff;
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	80 bb       	out	0x10, r24	; 16
 d96:	05 c0       	rjmp	.+10     	; 0xda2 <main+0x88a>
			while (!Serial_Available()) {
				PORTF	^=	0xff;
 d98:	81 b3       	in	r24, 0x11	; 17
 d9a:	80 95       	com	r24
 d9c:	81 bb       	out	0x11, r24	; 17
				delay_ms(200);
 d9e:	0e 94 33 01 	call	0x266	; 0x266 <delay_ms.clone.1>


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
 da2:	80 91 c8 00 	lds	r24, 0x00C8
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#ifdef DDRF
		case 'F':
			DDRF	=	0xff;
			while (!Serial_Available()) {
 da6:	87 ff       	sbrs	r24, 7
 da8:	f7 cf       	rjmp	.-18     	; 0xd98 <main+0x880>
				PORTF	^=	0xff;
				delay_ms(200);
			}
			PORTF	=	0;
 daa:	11 ba       	out	0x11, r1	; 17
 dac:	03 c0       	rjmp	.+6      	; 0xdb4 <main+0x89c>
			PORTL	=	0;
			break;
																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																																#endif

		default:
			PrintFromPROGMEMln(gTextMsg_PortNotSupported, 0);
 dae:	88 e2       	ldi	r24, 0x28	; 40
 db0:	91 e0       	ldi	r25, 0x01	; 1
 db2:	f5 cb       	rjmp	.-2070   	; 0x59e <main+0x86>
			getCharFlag	=	false;
			break;
		}
		if (getCharFlag) {
			recchar();
 db4:	0e 94 2c 01 	call	0x258	; 0x258 <recchar>
 db8:	f5 cb       	rjmp	.-2070   	; 0x5a4 <main+0x8c>
		}
	}
	else{
		PrintFromPROGMEMln(gTextMsg_MustBeLetter, 0);
 dba:	8b e3       	ldi	r24, 0x3B	; 59
 dbc:	91 e0       	ldi	r25, 0x01	; 1
 dbe:	ef cb       	rjmp	.-2082   	; 0x59e <main+0x86>
			PrintFromPROGMEMln(gTextMsg_HELP_MSG_Y, 2);
			AVR_PortOutput();
			break;

		default:
			PrintFromPROGMEMln(gTextMsg_HUH, 0);
 dc0:	89 e3       	ldi	r24, 0x39	; 57
 dc2:	90 e0       	ldi	r25, 0x00	; 0
 dc4:	ec cb       	rjmp	.-2088   	; 0x59e <main+0x86>
 dc6:	ff cf       	rjmp	.-2      	; 0xdc6 <main+0x8ae>

00000dc8 <__divmodhi4>:
 dc8:	97 fb       	bst	r25, 7
 dca:	09 2e       	mov	r0, r25
 dcc:	07 26       	eor	r0, r23
 dce:	0a d0       	rcall	.+20     	; 0xde4 <__divmodhi4_neg1>
 dd0:	77 fd       	sbrc	r23, 7
 dd2:	04 d0       	rcall	.+8      	; 0xddc <__divmodhi4_neg2>
 dd4:	0c d0       	rcall	.+24     	; 0xdee <__udivmodhi4>
 dd6:	06 d0       	rcall	.+12     	; 0xde4 <__divmodhi4_neg1>
 dd8:	00 20       	and	r0, r0
 dda:	1a f4       	brpl	.+6      	; 0xde2 <__divmodhi4_exit>

00000ddc <__divmodhi4_neg2>:
 ddc:	70 95       	com	r23
 dde:	61 95       	neg	r22
 de0:	7f 4f       	sbci	r23, 0xFF	; 255

00000de2 <__divmodhi4_exit>:
 de2:	08 95       	ret

00000de4 <__divmodhi4_neg1>:
 de4:	f6 f7       	brtc	.-4      	; 0xde2 <__divmodhi4_exit>
 de6:	90 95       	com	r25
 de8:	81 95       	neg	r24
 dea:	9f 4f       	sbci	r25, 0xFF	; 255
 dec:	08 95       	ret

00000dee <__udivmodhi4>:
 dee:	aa 1b       	sub	r26, r26
 df0:	bb 1b       	sub	r27, r27
 df2:	51 e1       	ldi	r21, 0x11	; 17
 df4:	07 c0       	rjmp	.+14     	; 0xe04 <__udivmodhi4_ep>

00000df6 <__udivmodhi4_loop>:
 df6:	aa 1f       	adc	r26, r26
 df8:	bb 1f       	adc	r27, r27
 dfa:	a6 17       	cp	r26, r22
 dfc:	b7 07       	cpc	r27, r23
 dfe:	10 f0       	brcs	.+4      	; 0xe04 <__udivmodhi4_ep>
 e00:	a6 1b       	sub	r26, r22
 e02:	b7 0b       	sbc	r27, r23

00000e04 <__udivmodhi4_ep>:
 e04:	88 1f       	adc	r24, r24
 e06:	99 1f       	adc	r25, r25
 e08:	5a 95       	dec	r21
 e0a:	a9 f7       	brne	.-22     	; 0xdf6 <__udivmodhi4_loop>
 e0c:	80 95       	com	r24
 e0e:	90 95       	com	r25
 e10:	bc 01       	movw	r22, r24
 e12:	cd 01       	movw	r24, r26
 e14:	08 95       	ret

00000e16 <__eerd_byte_usb1286>:
 e16:	f9 99       	sbic	0x1f, 1	; 31
 e18:	fe cf       	rjmp	.-4      	; 0xe16 <__eerd_byte_usb1286>
 e1a:	92 bd       	out	0x22, r25	; 34
 e1c:	81 bd       	out	0x21, r24	; 33
 e1e:	f8 9a       	sbi	0x1f, 0	; 31
 e20:	99 27       	eor	r25, r25
 e22:	80 b5       	in	r24, 0x20	; 32
 e24:	08 95       	ret

00000e26 <__eewr_byte_usb1286>:
 e26:	26 2f       	mov	r18, r22

00000e28 <__eewr_r18_usb1286>:
 e28:	f9 99       	sbic	0x1f, 1	; 31
 e2a:	fe cf       	rjmp	.-4      	; 0xe28 <__eewr_r18_usb1286>
 e2c:	1f ba       	out	0x1f, r1	; 31
 e2e:	92 bd       	out	0x22, r25	; 34
 e30:	81 bd       	out	0x21, r24	; 33
 e32:	20 bd       	out	0x20, r18	; 32
 e34:	0f b6       	in	r0, 0x3f	; 63
 e36:	f8 94       	cli
 e38:	fa 9a       	sbi	0x1f, 2	; 31
 e3a:	f9 9a       	sbi	0x1f, 1	; 31
 e3c:	0f be       	out	0x3f, r0	; 63
 e3e:	01 96       	adiw	r24, 0x01	; 1
 e40:	08 95       	ret
