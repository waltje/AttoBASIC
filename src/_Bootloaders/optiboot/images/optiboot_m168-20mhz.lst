
images/optiboot_m168-20mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00003e00  00003e00  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  00000238  2**0
                  CONTENTS, READONLY
  2 .stab         00000b94  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a6e  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
    3e00:	0f 92       	push	r0
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	11 24       	eor	r1, r1
    3e08:	84 b7       	in	r24, 0x34	; 52
    3e0a:	14 be       	out	0x34, r1	; 52
    3e0c:	81 ff       	sbrs	r24, 1
    3e0e:	e3 d0       	rcall	.+454    	; 0x3fd6 <appStart>
    3e10:	85 e0       	ldi	r24, 0x05	; 5
    3e12:	80 93 81 00 	sts	0x0081, r24
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	80 93 c0 00 	sts	0x00C0, r24
    3e1c:	88 e1       	ldi	r24, 0x18	; 24
    3e1e:	80 93 c1 00 	sts	0x00C1, r24
    3e22:	86 e0       	ldi	r24, 0x06	; 6
    3e24:	80 93 c2 00 	sts	0x00C2, r24
    3e28:	85 e1       	ldi	r24, 0x15	; 21
    3e2a:	80 93 c4 00 	sts	0x00C4, r24
    3e2e:	8e e0       	ldi	r24, 0x0E	; 14
    3e30:	bc d0       	rcall	.+376    	; 0x3faa <watchdogConfig>
    3e32:	25 9a       	sbi	0x04, 5	; 4
    3e34:	26 e0       	ldi	r18, 0x06	; 6
    3e36:	8c e3       	ldi	r24, 0x3C	; 60
    3e38:	9b ef       	ldi	r25, 0xFB	; 251
    3e3a:	31 e0       	ldi	r19, 0x01	; 1
    3e3c:	90 93 85 00 	sts	0x0085, r25
    3e40:	80 93 84 00 	sts	0x0084, r24
    3e44:	36 bb       	out	0x16, r19	; 22
    3e46:	b0 9b       	sbis	0x16, 0	; 22
    3e48:	fe cf       	rjmp	.-4      	; 0x3e46 <main+0x46>
    3e4a:	1d 9a       	sbi	0x03, 5	; 3
    3e4c:	a8 95       	wdr
    3e4e:	21 50       	subi	r18, 0x01	; 1
    3e50:	a9 f7       	brne	.-22     	; 0x3e3c <main+0x3c>
    3e52:	88 24       	eor	r8, r8
    3e54:	99 24       	eor	r9, r9
    3e56:	cc 24       	eor	r12, r12
    3e58:	c3 94       	inc	r12
    3e5a:	f5 e0       	ldi	r31, 0x05	; 5
    3e5c:	df 2e       	mov	r13, r31
    3e5e:	e1 e1       	ldi	r30, 0x11	; 17
    3e60:	ee 2e       	mov	r14, r30
    3e62:	73 e0       	ldi	r23, 0x03	; 3
    3e64:	f7 2e       	mov	r15, r23
    3e66:	95 d0       	rcall	.+298    	; 0x3f92 <getch>
    3e68:	81 34       	cpi	r24, 0x41	; 65
    3e6a:	69 f4       	brne	.+26     	; 0x3e86 <main+0x86>
    3e6c:	92 d0       	rcall	.+292    	; 0x3f92 <getch>
    3e6e:	89 83       	std	Y+1, r24	; 0x01
    3e70:	a2 d0       	rcall	.+324    	; 0x3fb6 <verifySpace>
    3e72:	89 81       	ldd	r24, Y+1	; 0x01
    3e74:	82 38       	cpi	r24, 0x82	; 130
    3e76:	11 f1       	breq	.+68     	; 0x3ebc <main+0xbc>
    3e78:	81 38       	cpi	r24, 0x81	; 129
    3e7a:	11 f4       	brne	.+4      	; 0x3e80 <main+0x80>
    3e7c:	85 e0       	ldi	r24, 0x05	; 5
    3e7e:	01 c0       	rjmp	.+2      	; 0x3e82 <main+0x82>
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	80 d0       	rcall	.+256    	; 0x3f84 <putch>
    3e84:	7c c0       	rjmp	.+248    	; 0x3f7e <main+0x17e>
    3e86:	82 34       	cpi	r24, 0x42	; 66
    3e88:	11 f4       	brne	.+4      	; 0x3e8e <main+0x8e>
    3e8a:	84 e1       	ldi	r24, 0x14	; 20
    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <main+0x94>
    3e8e:	85 34       	cpi	r24, 0x45	; 69
    3e90:	19 f4       	brne	.+6      	; 0x3e98 <main+0x98>
    3e92:	85 e0       	ldi	r24, 0x05	; 5
    3e94:	98 d0       	rcall	.+304    	; 0x3fc6 <getNch>
    3e96:	73 c0       	rjmp	.+230    	; 0x3f7e <main+0x17e>
    3e98:	85 35       	cpi	r24, 0x55	; 85
    3e9a:	61 f4       	brne	.+24     	; 0x3eb4 <main+0xb4>
    3e9c:	7a d0       	rcall	.+244    	; 0x3f92 <getch>
    3e9e:	08 2f       	mov	r16, r24
    3ea0:	10 e0       	ldi	r17, 0x00	; 0
    3ea2:	77 d0       	rcall	.+238    	; 0x3f92 <getch>
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	98 2e       	mov	r9, r24
    3ea8:	88 24       	eor	r8, r8
    3eaa:	80 2a       	or	r8, r16
    3eac:	91 2a       	or	r9, r17
    3eae:	88 0c       	add	r8, r8
    3eb0:	99 1c       	adc	r9, r9
    3eb2:	64 c0       	rjmp	.+200    	; 0x3f7c <main+0x17c>
    3eb4:	86 35       	cpi	r24, 0x56	; 86
    3eb6:	21 f4       	brne	.+8      	; 0x3ec0 <main+0xc0>
    3eb8:	84 e0       	ldi	r24, 0x04	; 4
    3eba:	85 d0       	rcall	.+266    	; 0x3fc6 <getNch>
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	e1 cf       	rjmp	.-62     	; 0x3e82 <main+0x82>
    3ec0:	84 36       	cpi	r24, 0x64	; 100
    3ec2:	09 f0       	breq	.+2      	; 0x3ec6 <main+0xc6>
    3ec4:	40 c0       	rjmp	.+128    	; 0x3f46 <main+0x146>
    3ec6:	65 d0       	rcall	.+202    	; 0x3f92 <getch>
    3ec8:	64 d0       	rcall	.+200    	; 0x3f92 <getch>
    3eca:	b8 2e       	mov	r11, r24
    3ecc:	62 d0       	rcall	.+196    	; 0x3f92 <getch>
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	88 16       	cp	r8, r24
    3ed2:	88 e3       	ldi	r24, 0x38	; 56
    3ed4:	98 06       	cpc	r9, r24
    3ed6:	18 f4       	brcc	.+6      	; 0x3ede <main+0xde>
    3ed8:	f4 01       	movw	r30, r8
    3eda:	f7 be       	out	0x37, r15	; 55
    3edc:	e8 95       	spm
    3ede:	00 e0       	ldi	r16, 0x00	; 0
    3ee0:	11 e0       	ldi	r17, 0x01	; 1
    3ee2:	57 d0       	rcall	.+174    	; 0x3f92 <getch>
    3ee4:	f8 01       	movw	r30, r16
    3ee6:	81 93       	st	Z+, r24
    3ee8:	8f 01       	movw	r16, r30
    3eea:	be 16       	cp	r11, r30
    3eec:	d1 f7       	brne	.-12     	; 0x3ee2 <main+0xe2>
    3eee:	f0 e0       	ldi	r31, 0x00	; 0
    3ef0:	8f 16       	cp	r8, r31
    3ef2:	f8 e3       	ldi	r31, 0x38	; 56
    3ef4:	9f 06       	cpc	r9, r31
    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <main+0xfe>
    3ef8:	f4 01       	movw	r30, r8
    3efa:	f7 be       	out	0x37, r15	; 55
    3efc:	e8 95       	spm
    3efe:	5b d0       	rcall	.+182    	; 0x3fb6 <verifySpace>
    3f00:	07 b6       	in	r0, 0x37	; 55
    3f02:	00 fc       	sbrc	r0, 0
    3f04:	fd cf       	rjmp	.-6      	; 0x3f00 <main+0x100>
    3f06:	f4 01       	movw	r30, r8
    3f08:	a0 e0       	ldi	r26, 0x00	; 0
    3f0a:	b1 e0       	ldi	r27, 0x01	; 1
    3f0c:	2c 91       	ld	r18, X
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	11 96       	adiw	r26, 0x01	; 1
    3f12:	8c 91       	ld	r24, X
    3f14:	11 97       	sbiw	r26, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	98 2f       	mov	r25, r24
    3f1a:	88 27       	eor	r24, r24
    3f1c:	82 2b       	or	r24, r18
    3f1e:	93 2b       	or	r25, r19
    3f20:	12 96       	adiw	r26, 0x02	; 2
    3f22:	0c 01       	movw	r0, r24
    3f24:	c7 be       	out	0x37, r12	; 55
    3f26:	e8 95       	spm
    3f28:	11 24       	eor	r1, r1
    3f2a:	32 96       	adiw	r30, 0x02	; 2
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	a0 38       	cpi	r26, 0x80	; 128
    3f30:	b8 07       	cpc	r27, r24
    3f32:	61 f7       	brne	.-40     	; 0x3f0c <main+0x10c>
    3f34:	f4 01       	movw	r30, r8
    3f36:	d7 be       	out	0x37, r13	; 55
    3f38:	e8 95       	spm
    3f3a:	07 b6       	in	r0, 0x37	; 55
    3f3c:	00 fc       	sbrc	r0, 0
    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
    3f40:	e7 be       	out	0x37, r14	; 55
    3f42:	e8 95       	spm
    3f44:	1c c0       	rjmp	.+56     	; 0x3f7e <main+0x17e>
    3f46:	84 37       	cpi	r24, 0x74	; 116
    3f48:	61 f4       	brne	.+24     	; 0x3f62 <main+0x162>
    3f4a:	23 d0       	rcall	.+70     	; 0x3f92 <getch>
    3f4c:	22 d0       	rcall	.+68     	; 0x3f92 <getch>
    3f4e:	08 2f       	mov	r16, r24
    3f50:	20 d0       	rcall	.+64     	; 0x3f92 <getch>
    3f52:	31 d0       	rcall	.+98     	; 0x3fb6 <verifySpace>
    3f54:	f4 01       	movw	r30, r8
    3f56:	85 91       	lpm	r24, Z+
    3f58:	4f 01       	movw	r8, r30
    3f5a:	14 d0       	rcall	.+40     	; 0x3f84 <putch>
    3f5c:	01 50       	subi	r16, 0x01	; 1
    3f5e:	d1 f7       	brne	.-12     	; 0x3f54 <main+0x154>
    3f60:	0e c0       	rjmp	.+28     	; 0x3f7e <main+0x17e>
    3f62:	85 37       	cpi	r24, 0x75	; 117
    3f64:	39 f4       	brne	.+14     	; 0x3f74 <main+0x174>
    3f66:	27 d0       	rcall	.+78     	; 0x3fb6 <verifySpace>
    3f68:	8e e1       	ldi	r24, 0x1E	; 30
    3f6a:	0c d0       	rcall	.+24     	; 0x3f84 <putch>
    3f6c:	84 e9       	ldi	r24, 0x94	; 148
    3f6e:	0a d0       	rcall	.+20     	; 0x3f84 <putch>
    3f70:	86 e0       	ldi	r24, 0x06	; 6
    3f72:	87 cf       	rjmp	.-242    	; 0x3e82 <main+0x82>
    3f74:	81 35       	cpi	r24, 0x51	; 81
    3f76:	11 f4       	brne	.+4      	; 0x3f7c <main+0x17c>
    3f78:	88 e0       	ldi	r24, 0x08	; 8
    3f7a:	17 d0       	rcall	.+46     	; 0x3faa <watchdogConfig>
    3f7c:	1c d0       	rcall	.+56     	; 0x3fb6 <verifySpace>
    3f7e:	80 e1       	ldi	r24, 0x10	; 16
    3f80:	01 d0       	rcall	.+2      	; 0x3f84 <putch>
    3f82:	71 cf       	rjmp	.-286    	; 0x3e66 <main+0x66>

00003f84 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f84:	90 91 c0 00 	lds	r25, 0x00C0
    3f88:	95 ff       	sbrs	r25, 5
    3f8a:	fc cf       	rjmp	.-8      	; 0x3f84 <putch>
  UART_UDR = ch;
    3f8c:	80 93 c6 00 	sts	0x00C6, r24
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    3f90:	08 95       	ret

00003f92 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f92:	80 91 c0 00 	lds	r24, 0x00C0
    3f96:	87 ff       	sbrs	r24, 7
    3f98:	fc cf       	rjmp	.-8      	; 0x3f92 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f9a:	80 91 c0 00 	lds	r24, 0x00C0
    3f9e:	84 fd       	sbrc	r24, 4
    3fa0:	01 c0       	rjmp	.+2      	; 0x3fa4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3fa2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3fa4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3fa8:	08 95       	ret

00003faa <watchdogConfig>:
#if defined __AVR_ATmega16__ || __AVR_ATmega32__
 //EMK - atmega32 and atmega16
  WDTCR |= _BV(WDTOE) | _BV(WDE);
  WDTCR = x;
 #else
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3faa:	e0 e6       	ldi	r30, 0x60	; 96
    3fac:	f0 e0       	ldi	r31, 0x00	; 0
    3fae:	98 e1       	ldi	r25, 0x18	; 24
    3fb0:	90 83       	st	Z, r25
  WDTCSR = x;
    3fb2:	80 83       	st	Z, r24
 #endif
}
    3fb4:	08 95       	ret

00003fb6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fb6:	ed df       	rcall	.-38     	; 0x3f92 <getch>
    3fb8:	80 32       	cpi	r24, 0x20	; 32
    3fba:	19 f0       	breq	.+6      	; 0x3fc2 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fbc:	88 e0       	ldi	r24, 0x08	; 8
    3fbe:	f5 df       	rcall	.-22     	; 0x3faa <watchdogConfig>
    3fc0:	ff cf       	rjmp	.-2      	; 0x3fc0 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    3fc2:	84 e1       	ldi	r24, 0x14	; 20
    3fc4:	df cf       	rjmp	.-66     	; 0x3f84 <putch>

00003fc6 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fc6:	1f 93       	push	r17
    3fc8:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    3fca:	e3 df       	rcall	.-58     	; 0x3f92 <getch>
    3fcc:	11 50       	subi	r17, 0x01	; 1
    3fce:	e9 f7       	brne	.-6      	; 0x3fca <getNch+0x4>
  verifySpace();
    3fd0:	f2 df       	rcall	.-28     	; 0x3fb6 <verifySpace>
}
    3fd2:	1f 91       	pop	r17
    3fd4:	08 95       	ret

00003fd6 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fd6:	28 2e       	mov	r2, r24

  MCUSR = rstFlags;		// set the MCUSR to previous value KSV 2013-1024
    3fd8:	84 bf       	out	0x34, r24	; 52

  watchdogConfig(WATCHDOG_OFF);
    3fda:	80 e0       	ldi	r24, 0x00	; 0
    3fdc:	e6 df       	rcall	.-52     	; 0x3faa <watchdogConfig>
  __asm__ __volatile__ (
    3fde:	ee 27       	eor	r30, r30
    3fe0:	ff 27       	eor	r31, r31
    3fe2:	09 94       	ijmp
